using SIMULTAN.Data;
using SIMULTAN.Data.Components;
using SIMULTAN.Data.FlowNetworks;
using SIMULTAN.Data.MultiValues;
using SIMULTAN.Data.Users;
using SIMULTAN.Excel;
using SIMULTAN.Serializer.DXF;
using SIMULTAN.Utils;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Media;
using System.Windows.Media.Media3D;
using static SIMULTAN.Data.Components.CalculationParameterMetaData;

namespace SIMULTAN.Serializer.CODXF
{
    /// <summary>
    /// Contains methods to read/write components in DXF format.
    /// 
    /// The detailed documentation for the DXF format can be found in the Wiki
    /// </summary>
    public static class ComponentDxfIOComponents
    {
        #region Syntax Parameter

        /// <summary>
        /// Syntax for a <see cref="SimParameter"/>
        /// </summary>
        internal static DXFEntityParserElement<SimParameter> ParameterEntityElement =
            new DXFEntityParserElement<SimParameter>(ParamStructTypes.PARAMETER,
                (data, info) => ParseParameter(data, info),
                new DXFEntryParserElement[]
                {
                    new DXFSingleEntryParserElement<long>(ParamStructCommonSaveCode.ENTITY_LOCAL_ID),
                    new DXFSingleEntryParserElement<string>(ParameterSaveCode.NAME),
                    new DXFSingleEntryParserElement<string>(ParameterSaveCode.UNIT),
                    new DXFSingleEntryParserElement<SimCategory>(ParameterSaveCode.CATEGORY),
                    new DXFSingleEntryParserElement<SimInfoFlow>(ParameterSaveCode.PROPAGATION),
                    new DXFSingleEntryParserElement<SimParameterInstancePropagation>(ParameterSaveCode.INSTANCE_PROPAGATION),
                    new DXFSingleEntryParserElement<double>(ParameterSaveCode.VALUE_MIN),
                    new DXFSingleEntryParserElement<double>(ParameterSaveCode.VALUE_MAX),
                    new DXFSingleEntryParserElement<double>(ParameterSaveCode.VALUE_CURRENT),
                    new DXFSingleEntryParserElement<string>(ParameterSaveCode.VALUE_TEXT),
                    new DXFSingleEntryParserElement<SimParameterOperations>(ParameterSaveCode.ALLOWED_OPERATIONS),
                    new DXFSingleEntryParserElement<bool>(ParameterSaveCode.IS_AUTOGENERATED),

                    new DXFSingleEntryParserElement<Guid>(MultiValueSaveCode.MVPTR_GLOBALID),
                    new DXFSingleEntryParserElement<long>(MultiValueSaveCode.MVPTR_LOCALID),
                    new DXFSingleEntryParserElement<double>(MultiValueSaveCode.MVPTR_AXIS_X),
                    new DXFSingleEntryParserElement<double>(MultiValueSaveCode.MVPTR_AXIS_Y),
                    new DXFSingleEntryParserElement<double>(MultiValueSaveCode.MVPTR_AXIS_Z),
                    new DXFSingleEntryParserElement<string>(MultiValueSaveCode.MVPTR_GRAPHNAME),

                    //Legacy
                    new DXFSingleEntryParserElement<long>(ParameterSaveCode.VALUE_FIELD_REF) { MaxVersion = 0 },
                    new DXFSingleEntryParserElement<int>(MultiValueSaveCode.MVDisplayVector_CELL_INDEX_X) { MaxVersion = 0 },
                    new DXFSingleEntryParserElement<int>(MultiValueSaveCode.MVDisplayVector_CELL_INDEX_Y) { MaxVersion = 0 },
                    new DXFSingleEntryParserElement<int>(MultiValueSaveCode.MVDisplayVector_CELL_INDEX_Z) { MaxVersion = 0 },
                });

        #endregion

        #region Syntax Calculation

        /// <summary>
        /// Syntax for a <see cref="SimCalculation"/>
        /// </summary>
        internal static DXFEntityParserElement<CalculationInitializationData> CalculationEntityElement =
            new DXFEntityParserElement<CalculationInitializationData>(ParamStructTypes.CALCULATION,
                (data, info) => ParseCalculation(data, info),
                new DXFEntryParserElement[]
                {
                    new DXFSingleEntryParserElement<long>(ParamStructCommonSaveCode.ENTITY_LOCAL_ID),

                    new DXFSingleEntryParserElement<string>(CalculationSaveCode.NAME),
                    new DXFSingleEntryParserElement<string>(CalculationSaveCode.EXPRESSION),
                    new DXFSingleEntryParserElement<int>(CalculationSaveCode.VECTOR_CALC_ITERATION_COUNT),
                    new DXFSingleEntryParserElement<SimResultAggregationMethod>(CalculationSaveCode.VECTOR_CALC_AGGREGATION),
                    new DXFSingleEntryParserElement<bool>(CalculationSaveCode.VECTOR_CALC_OVERRIDE),

                    new DXFStructArrayEntryParserElement<KeyValuePair<string, SimId>>(CalculationSaveCode.PARAMS_INPUT,
                        (data, info) => ParseCalculationParameterReference(data, info),
                        new DXFEntryParserElement[]
                        {
                            new DXFSingleEntryParserElement<string>(ParamStructCommonSaveCode.STRING_VALUE),
                            new DXFSingleEntryParserElement<Guid>(ParamStructCommonSaveCode.ENTITY_KEY) { MinVersion = 12 },
                            new DXFSingleEntryParserElement<long>(ParamStructCommonSaveCode.ENTITY_REF) { MinVersion = 12 },
                            new DXFSingleEntryParserElement<string>(ParamStructCommonSaveCode.ENTITY_REF) { MaxVersion = 11 }
                        }),

                    new DXFStructArrayEntryParserElement<KeyValuePair<string, SimId>>(CalculationSaveCode.PARAMS_OUTPUT,
                        (data, info) => ParseCalculationParameterReference(data, info),
                        new DXFEntryParserElement[]
                        {
                            new DXFSingleEntryParserElement<string>(ParamStructCommonSaveCode.STRING_VALUE),
                            new DXFSingleEntryParserElement<Guid>(ParamStructCommonSaveCode.ENTITY_KEY) { MinVersion = 12 },
                            new DXFSingleEntryParserElement<long>(ParamStructCommonSaveCode.ENTITY_REF) { MinVersion = 12 },
                            new DXFSingleEntryParserElement<string>(ParamStructCommonSaveCode.ENTITY_REF) { MaxVersion = 11 }
                        }),

                    new DXFArrayEntryParserElement<MultiValueCalculationBinaryOperation>(CalculationSaveCode.VECTOR_CALC_OPERATIONS,
                        ParamStructCommonSaveCode.X_VALUE),

                    new DXFStructArrayEntryParserElement<(string, long, RowColumnRange)>(CalculationSaveCode.VECTOR_CALC_RANGES,
                        (data, info) => ParseRowColumnRange(data, info),
                        new DXFEntryParserElement[]
                        {
                            new DXFSingleEntryParserElement<string>(ParamStructCommonSaveCode.V5_VALUE) { MinVersion = 4 },
                            new DXFSingleEntryParserElement<long>(ParamStructCommonSaveCode.V5_VALUE) { MaxVersion = 3 },
                            new DXFSingleEntryParserElement<int>(ParamStructCommonSaveCode.X_VALUE),
                            new DXFSingleEntryParserElement<int>(ParamStructCommonSaveCode.Y_VALUE),
                            new DXFSingleEntryParserElement<int>(ParamStructCommonSaveCode.Z_VALUE),
                            new DXFSingleEntryParserElement<int>(ParamStructCommonSaveCode.W_VALUE),
                        }),

                    new DXFStructArrayEntryParserElement<(string, long, double, double, DeviationModeType, bool, bool, double)>(
                        CalculationSaveCode.VECTOR_CALC_RANDOM, (data, info) => ParseRandomization(data, info),
                        new DXFEntryParserElement[]
                        {
                            new DXFSingleEntryParserElement<string>(ParamStructCommonSaveCode.V5_VALUE) { MinVersion = 4 },
                            new DXFSingleEntryParserElement<long>(ParamStructCommonSaveCode.V5_VALUE) { MaxVersion = 3 },
                            new DXFSingleEntryParserElement<double>(ParamStructCommonSaveCode.X_VALUE),
                            new DXFSingleEntryParserElement<double>(ParamStructCommonSaveCode.Y_VALUE),
                            new DXFSingleEntryParserElement<DeviationModeType>(ParamStructCommonSaveCode.Z_VALUE),
                            new DXFSingleEntryParserElement<bool>(ParamStructCommonSaveCode.W_VALUE),
                            new DXFSingleEntryParserElement<bool>(ParamStructCommonSaveCode.V6_VALUE),
                            new DXFSingleEntryParserElement<double>(ParamStructCommonSaveCode.V7_VALUE),
                        })
                });

        #endregion

        #region Syntax Instance

        /// <summary>
        /// Syntax for a <see cref="SimInstancePlacementNetwork"/>
        /// </summary>
        internal static DXFEntityParserElementBase<SimInstancePlacement> InstancePlacementNetworkElement =
            new DXFComplexEntityParserElement<SimInstancePlacement>(
                new DXFEntityParserElement<SimInstancePlacement>(ParamStructTypes.INSTANCE_PLACEMENT_NETWORK,
                    (data, info) => ParseNetworkPlacement(data, info),
                    new DXFEntryParserElement[]
                    {
                        new DXFSingleEntryParserElement<long>(ComponentInstanceSaveCode.INST_NETWORKELEMENT_ID),
                        new DXFSingleEntryParserElement<Guid>(ComponentInstanceSaveCode.INST_NETWORKELEMENT_LOCATION)
                    })
                );

        /// <summary>
        /// Syntax for a <see cref="SimInstancePlacementSimNetwork"/>
        /// </summary>
        internal static DXFEntityParserElementBase<SimInstancePlacement> InstancePlacementSimNetworkElement =
            new DXFComplexEntityParserElement<SimInstancePlacement>(
                new DXFEntityParserElement<SimInstancePlacement>(ParamStructTypes.INSTANCE_PLACEMENT_SIMNETWORK,
                    (data, info) => ParseSimNetworkPlacement(data, info),
                    new DXFEntryParserElement[]
                    {
                        new DXFSingleEntryParserElement<long>(ComponentInstanceSaveCode.INST_NETWORKELEMENT_ID),
                        new DXFSingleEntryParserElement<Guid>(ComponentInstanceSaveCode.INST_NETWORKELEMENT_LOCATION)
                    })
                );

        /// <summary>
        /// Syntax for a <see cref="SimInstancePlacementGeometry"/>
        /// </summary>
        internal static DXFEntityParserElementBase<SimInstancePlacement> InstancePlacementGeometryElement =
            new DXFComplexEntityParserElement<SimInstancePlacement>(
            new DXFEntityParserElement<SimInstancePlacement>(ParamStructTypes.INSTANCE_PLACEMENT_GEOMETRY,
                (data, info) => ParseGeometryPlacement(data, info),
                new DXFEntryParserElement[]
                {
                    new DXFSingleEntryParserElement<int>(ComponentInstanceSaveCode.GEOM_REF_FILE),
                    new DXFSingleEntryParserElement<ulong>(ComponentInstanceSaveCode.GEOM_REF_ID)
                })
                );

        /// <summary>
        /// Syntax for a <see cref="SimComponentInstance"/>
        /// </summary>
        internal static DXFEntityParserElement<SimComponentInstance> InstanceEntityElement =
            new DXFEntityParserElement<SimComponentInstance>(ParamStructTypes.COMPONENT_INSTANCE,
                (data, info) => ParseInstance(data, info),
                new DXFEntryParserElement[]
                {
                    new DXFSingleEntryParserElement<long>(ParamStructCommonSaveCode.ENTITY_LOCAL_ID),
                    new DXFSingleEntryParserElement<string>(ComponentInstanceSaveCode.NAME),
                    new DXFSingleEntryParserElement<SimInstanceType>(ComponentInstanceSaveCode.INSTANCE_TYPE),
                    new DXFSingleEntryParserElement<bool>(ComponentInstanceSaveCode.STATE_ISREALIZED),
                    new DXFSingleEntryParserElement<SimInstanceConnectionState>(ComponentInstanceSaveCode.STATE_CONNECTION_STATE),
                    new DXFSingleEntryParserElement<bool>(ComponentInstanceSaveCode.INST_PROPAGATE_PARAM_CHANGES),

                    new DXFEntitySequenceEntryParserElement<SimInstancePlacement>(ComponentInstanceSaveCode.INST_PLACEMENTS,
                        new DXFEntityParserElementBase<SimInstancePlacement>[]
                        {
                            InstancePlacementNetworkElement,
                            InstancePlacementGeometryElement,
                            InstancePlacementSimNetworkElement,
                        })
                    {
                        MinVersion = 12,
                    },

                    //Old Placements
                    new DXFSingleEntryParserElement<ulong>(ComponentInstanceSaveCode.GEOM_REF_ID) { MaxVersion = 11 },
                    new DXFSingleEntryParserElement<int>(ComponentInstanceSaveCode.GEOM_REF_FILE) { MaxVersion = 11 },
                    new DXFSingleEntryParserElement<long>(ComponentInstanceSaveCode.INST_NETWORKELEMENT_ID) { MaxVersion = 11 },
                    new DXFSingleEntryParserElement<Guid>(ComponentInstanceSaveCode.INST_NETWORKELEMENT_LOCATION) { MaxVersion = 11 },

                    new DXFSingleEntryParserElement<Quaternion>(ComponentInstanceSaveCode.INST_ROTATION),
                    new DXFArrayEntryParserElement<double>(ComponentInstanceSaveCode.INST_SIZE, ParamStructCommonSaveCode.X_VALUE),

                    new DXFStructArrayEntryParserElement<SimInstanceSizeTransferDefinitionItem>(
                        ComponentInstanceSaveCode.INST_SIZE_TRANSFERSETTINGS,
                        (data, info) => ParseSizeTransferDefinition(data, info),
                        new DXFEntryParserElement[]
                        {
                            new DXFSingleEntryParserElement<SimInstanceSizeTransferSource>(ComponentInstanceSaveCode.INST_SIZE_TS_SOURCE),
                            new DXFSkipEntryParserElement(ComponentInstanceSaveCode.INST_SIZE_TS_INITVAL) { MaxVersion = 7 },
                            new DXFSingleEntryParserElement<long>(ComponentInstanceSaveCode.INST_SIZE_TS_PARAMETER_LOCALID)
                                { IsOptional = true, MinVersion = 8 },
                            new DXFSingleEntryParserElement<string>(ComponentInstanceSaveCode.INST_SIZE_TS_PARAMETER_LOCALID)
                                { IsOptional = true, MaxVersion = 7 },
                            new DXFSingleEntryParserElement<Guid>(ComponentInstanceSaveCode.INST_SIZE_TS_PARAMETER_GLOBALID)
                                { IsOptional = true, MinVersion = 12 },
                            new DXFSingleEntryParserElement<double>(ComponentInstanceSaveCode.INST_SIZE_TS_ADDEND),
                        }),

                    new DXFStructArrayEntryParserElement<Point3D>(ComponentInstanceSaveCode.INST_PATH,
                        (data, info) => {
                            return new Point3D(
                                data.Get<double>(ParamStructCommonSaveCode.X_VALUE, 0.0),
                                data.Get<double>(ParamStructCommonSaveCode.Y_VALUE, 0.0),
                                data.Get<double>(ParamStructCommonSaveCode.Z_VALUE, 0.0)
                                );
                        },
                        new DXFEntryParserElement[]
                        {
                            new DXFSingleEntryParserElement<double>(ParamStructCommonSaveCode.X_VALUE),
                            new DXFSingleEntryParserElement<double>(ParamStructCommonSaveCode.Y_VALUE),
                            new DXFSingleEntryParserElement<double>(ParamStructCommonSaveCode.Z_VALUE),
                        }),

                    new DXFStructArrayEntryParserElement<(SimId, string, double)>(ComponentInstanceSaveCode.INST_PARAMS,
                        (data, info) => {

                            var paramName = "";
                            var paramId = SimId.Empty;

                            if (info.FileVersion >= 8)
                                paramId = new SimId(info.GlobalId, data.Get<long>(ComponentInstanceSaveCode.INST_PARAM_ID, 0));
                            else
                                paramName = data.Get<string>(ComponentInstanceSaveCode.INST_PARAM_ID, string.Empty);

                            return (
                                paramId,
                                paramName,
                                data.Get<double>(ComponentInstanceSaveCode.INST_PARAM_VAL, 0.0)
                                );
                        },
                        new DXFEntryParserElement[]
                        {
                            new DXFSingleEntryParserElement<long>(ComponentInstanceSaveCode.INST_PARAM_ID) { MinVersion = 8 },
                            new DXFSingleEntryParserElement<string>(ComponentInstanceSaveCode.INST_PARAM_ID) { MaxVersion = 7 },
                            new DXFSingleEntryParserElement<double>(ComponentInstanceSaveCode.INST_PARAM_VAL),
                        }),
                });

        #endregion

        #region Syntax Mappings

        /// <summary>
        /// Syntax for a <see cref="CalculatorMapping"/>
        /// </summary>
        internal static DXFEntityParserElementBase<CalculatorMapping> CalculatorMappingElement =
            new DXFEntityParserElement<CalculatorMapping>(
                ParamStructTypes.MAPPING_TO_COMP,
                (data, info) => ParseMapping(data, info),
                new DXFEntryParserElement[]
                {
                    new DXFSingleEntryParserElement<string>(CalculatorMappingSaveCode.NAME),
                    new DXFSingleEntryParserElement<long>(CalculatorMappingSaveCode.CALCULATOR_LOCALID) { MaxVersion = 0 },
                    new DXFSingleEntryParserElement<string>(CalculatorMappingSaveCode.CALCULATOR_LOCALID) { MinVersion = 1, MaxVersion = 11 },
                    new DXFSingleEntryParserElement<long>(CalculatorMappingSaveCode.CALCULATOR_LOCALID)  { MinVersion = 12 },
                    new DXFSingleEntryParserElement<Guid>(CalculatorMappingSaveCode.CALCULATOR_GLOBALID) { MinVersion = 12 },

                    new DXFStructArrayEntryParserElement<(SimId, SimId)>(
                        CalculatorMappingSaveCode.INPUT_MAPPING,
                        (data, info) => ParseCalculatorMappingInputParameterTuple(data, info),
                        new DXFEntryParserElement[]
                        {
                            new DXFSingleEntryParserElement<long>(CalculatorMappingSaveCode.INPUT_DATAPARAMETER_LOCALID),
                            new DXFSingleEntryParserElement<Guid>(CalculatorMappingSaveCode.INPUT_DATAPARAMETER_GLOBALID) { MinVersion = 12 },
                            new DXFSingleEntryParserElement<long>(CalculatorMappingSaveCode.INPUT_CALCULATORPARAMETER_LOCALID),
                            new DXFSingleEntryParserElement<Guid>(CalculatorMappingSaveCode.INPUT_CALCULATORPARAMETER_GLOBALID) { MinVersion = 12 },
                        }),

                    new DXFStructArrayEntryParserElement<(SimId, SimId)>(
                        CalculatorMappingSaveCode.OUTPUT_MAPPING,
                        (data, info) => ParseCalculatorMappingOutputParameterTuple(data, info),
                        new DXFEntryParserElement[]
                        {
                            new DXFSingleEntryParserElement<long>(CalculatorMappingSaveCode.OUTPUT_DATAPARAMETER_LOCALID),
                            new DXFSingleEntryParserElement<Guid>(CalculatorMappingSaveCode.OUTPUT_DATAPARAMETER_GLOBALID) { MinVersion = 12 },
                            new DXFSingleEntryParserElement<long>(CalculatorMappingSaveCode.OUTPUT_CALCULATORPARAMETER_LOCALID),
                            new DXFSingleEntryParserElement<Guid>(CalculatorMappingSaveCode.OUTPUT_CALCULATORPARAMETER_GLOBALID) { MinVersion = 12 },
                        }),
                });

        #endregion

        #region Syntax Access Profile

        /// <summary>
        /// Syntax for a <see cref="SimAccessProfileEntry"/>
        /// </summary>
        internal static DXFEntityParserElementBase<SimAccessProfileEntry> ProfileEntryElement =
            new DXFEntityParserElement<SimAccessProfileEntry>(
                ParamStructTypes.ACCESS_TRACKER,
                (data, info) => ParseProfileEntry(data, info),
                new DXFEntryParserElement[]
                {
                    new DXFSingleEntryParserElement<SimUserRole>(ParamStructCommonSaveCode.ENTITY_KEY),
                    new DXFSingleEntryParserElement<SimComponentAccessPrivilege>(ComponentAccessTrackerSaveCode.FLAGS),

                    new DXFSingleEntryParserElement<DateTime>(ComponentAccessTrackerSaveCode.WRITE_LAST),
                    new DXFSingleEntryParserElement<DateTime>(ComponentAccessTrackerSaveCode.SUPERVIZE_LAST),
                    new DXFSingleEntryParserElement<DateTime>(ComponentAccessTrackerSaveCode.RELEASE_LAST),
                });

        #endregion

        #region Syntax Excel Component Mapping

        /// <summary>
        /// Syntax for a <see cref="ExcelComponentMapping"/>
        /// </summary>
        internal static DXFEntityParserElementBase<ExcelComponentMapping> ExcelComponentMappingElement =
            new DXFEntityParserElement<ExcelComponentMapping>(
                ParamStructTypes.EXCEL_MAPPING,
                (data, info) => ParseExcelComponentMapping(data, info),
                new DXFEntryParserElement[]
                {
                    new DXFStructArrayEntryParserElement<SimId>(ExcelMappingSaveCode.MAP_PATH, ParseExcelMappingPathItem,
                        new DXFEntryParserElement[]
                        {
                            new DXFSingleEntryParserElement<long>(ParamStructCommonSaveCode.X_VALUE),
                            new DXFSingleEntryParserElement<Guid>(ParamStructCommonSaveCode.Y_VALUE) { MinVersion = 12 }
                        }),

                    new DXFSingleEntryParserElement<string>(ExcelMappingSaveCode.MAP_TOOL_NAME),
                    new DXFSingleEntryParserElement<string>(ExcelMappingSaveCode.MAP_RULE_NAME),
                    new DXFSingleEntryParserElement<int>(ExcelMappingSaveCode.MAP_RULE_INDEX),
                });

        #endregion

        #region Syntax Chat Item

        /// <summary>
        /// Syntax for a <see cref="SimChatItem"/>
        /// </summary>
        internal static DXFEntityParserElementBase<SimChatItem> SimChatItemElement =
            new DXFComplexEntityParserElement<SimChatItem>(
            new DXFEntityParserElement<SimChatItem>(
                ParamStructTypes.CHAT_ITEM,
                (data, info) => ParseChatItem(data, info),
                new DXFEntryParserElement[]
                {
                    new DXFSingleEntryParserElement<SimChatItemType>(ChatItemSaveCode.TYPE),
                    new DXFSingleEntryParserElement<SimUserRole>(ChatItemSaveCode.AUTHOR),
                    new DXFSingleEntryParserElement<string>(ChatItemSaveCode.VR_ADDRESS),
                    new DXFSingleEntryParserElement<string>(ChatItemSaveCode.VR_PASSWORD),
                    new DXFSingleEntryParserElement<string>(ChatItemSaveCode.GIT_COMMIT),
                    new DXFSingleEntryParserElement<DateTime>(ChatItemSaveCode.TIMESTAMP),
                    new DXFSingleEntryParserElement<string>(ChatItemSaveCode.MESSAGE),
                    new DXFSingleEntryParserElement<SimChatItemState>(ChatItemSaveCode.STATE),

                    new DXFArrayEntryParserElement<SimUserRole>(ChatItemSaveCode.EXPECTED_REACTIONS_FROM, ParamStructCommonSaveCode.X_VALUE),

                    new DXFEntitySequenceEntryParserElement<SimChatItem>(ChatItemSaveCode.CHILDREN, 
                        new DXFRecursiveEntityParserElement<SimChatItem>(ParamStructTypes.CHAT_ITEM, "SimChatItem")
                        ),
                })
            )
            {
                Identifier = "SimChatItem"
            };

        #endregion

        #region Syntax Component

        /// <summary>
        /// Syntax for a Color in the pre-Version 12 format
        /// </summary>
        internal static DXFEntityParserElementBase<Color> ComponentColorV11Element =
            new DXFEntityParserElement<Color>(ParamStructTypes.COLOR_IN_BYTES, ParseColor,
                new DXFEntryParserElement[]
                {
                    new DXFSingleEntryParserElement<byte>(ParamStructCommonSaveCode.V5_VALUE),
                    new DXFSingleEntryParserElement<byte>(ParamStructCommonSaveCode.V6_VALUE),
                    new DXFSingleEntryParserElement<byte>(ParamStructCommonSaveCode.V7_VALUE),
                    new DXFSingleEntryParserElement<byte>(ParamStructCommonSaveCode.V8_VALUE),
                });

        /// <summary>
        /// Syntax for a <see cref="SimComponent"/> together with it's slot (in case of sub components)
        /// </summary>
        internal static DXFEntityParserElementBase<(SimSlot, SimComponent)> ComponentEntityElement
            = new DXFComplexEntityParserElement<(SimSlot, SimComponent)>(
                new ComponentV11EntityParserElement(ParamStructTypes.COMPONENT,
                    (data, info) => ParseComponent(data, info),
                    new DXFEntryParserElement[]
                    {
                        new DXFSingleEntryParserElement<SimSlot>(ParamStructCommonSaveCode.ENTITY_KEY),

                        new DXFSingleEntryParserElement<long>(ParamStructCommonSaveCode.ENTITY_LOCAL_ID),
                        new DXFSingleEntryParserElement<string>(ComponentSaveCode.NAME),
                        new DXFMultiLineTextElement(ComponentSaveCode.DESCRIPTION),
                        new DXFSingleEntryParserElement<bool>(ComponentSaveCode.GENERATED_AUTOMATICALLY),
                        new DXFSingleEntryParserElement<string>(ComponentSaveCode.CURRENT_SLOT),

                        new DXFEntitySequenceEntryParserElement<(SimSlot, SimComponent)>(ComponentSaveCode.CONTAINED_COMPONENTS,
                            new DXFRecursiveEntityParserElement<(SimSlot, SimComponent)>(ParamStructTypes.COMPONENT, "SimComponent")),
                        new DXFArrayEntryParserElement<SimSlot>(ComponentSaveCode.CONTAINED_COMPONENT_SLOTS, ParamStructCommonSaveCode.STRING_VALUE),

                        new DXFEntitySequenceEntryParserElement<SimAccessProfileEntry>(ComponentSaveCode.PROFILE,
                            ProfileEntryElement) { MinVersion = 12 },
                        new DXFEntitySequenceNoStartEntryParserElementV11<SimAccessProfileEntry>(ComponentSaveCode.PROFILE,
                            ProfileEntryElement) { MaxVersion = 11 },

                        new DXFStructArrayEntryParserElement<SimComponentReference>(ComponentSaveCode.REFERENCED_COMPONENTS,
                            (data, info) => ParseComponentReference(data, info),
                            new DXFEntryParserElement[]
                            {
                                new DXFSingleEntryParserElement<SimSlot>(ParamStructCommonSaveCode.STRING_VALUE),
                                new DXFSingleEntryParserElement<long>(ParamStructCommonSaveCode.X_VALUE),
                                new DXFSingleEntryParserElement<Guid>(ParamStructCommonSaveCode.Y_VALUE) { MinVersion = 2 }
                            }),

                        new DXFEntitySequenceEntryParserElement<SimParameter>(ComponentSaveCode.CONTAINED_PARAMETERS,
                            ParameterEntityElement),
                        new DXFEntitySequenceEntryParserElement<CalculationInitializationData>(ComponentSaveCode.CONTAINED_CALCULATIONS,
                            CalculationEntityElement),

                        new DXFSingleEntryParserElement<SimInstanceType>(ComponentSaveCode.INSTANCE_TYPE),
                        new DXFEntitySequenceEntryParserElement<SimComponentInstance>(ComponentSaveCode.INSTANCES, 
                            InstanceEntityElement),

                        new DXFEntitySequenceEntryParserElement<CalculatorMapping>(ComponentSaveCode.CALCULATOR_MAPPINGS,
                            CalculatorMappingElement),

                        new DXFEntitySequenceEntryParserElement<ExcelComponentMapping>(ComponentSaveCode.MAPPINGS_TO_EXCEL_TOOLS,
                            ExcelComponentMappingElement) { MinVersion = 12 },
                        new DXFEntitySequenceAlwaysStartEndEntryParserElementV11<ExcelComponentMapping>(
                            ComponentSaveCode.MAPPINGS_TO_EXCEL_TOOLS,
                            ExcelComponentMappingElement) { MaxVersion = 11 },

                        new DXFEntitySequenceEntryParserElement<SimChatItem>(ChatItemSaveCode.CONVERSATION,
                            SimChatItemElement) { MinVersion = 12 },
                        new DXFEntitySequenceAlwaysStartEndEntryParserElementV11<SimChatItem>(ChatItemSaveCode.CONVERSATION,
                            SimChatItemElement) { MaxVersion = 11 },

                        new DXFSingleEntryParserElement<SimComponentVisibility>(ComponentSaveCode.VISIBILTY),
                        new DXFSingleEntryParserElement<SimComponentContentSorting>(ComponentSaveCode.SORTING_TYPE) { MinVersion = 1 },

                        new DXFSingleEntryParserElement<Color>(ComponentSaveCode.COLOR) { MinVersion = 12 },
                        new DXFEntitySequenceEntryParserElement<Color>(ComponentSaveCode.COLOR, ComponentColorV11Element)
                        {
                            MaxVersion = 11
                        }
                    }))
                {
                    Identifier = "SimComponent"
                };

        /// <summary>
        /// Syntax for a section containing Components
        /// </summary>
        public static DXFSectionParserElement<(SimSlot, SimComponent)> ComponentSectionEntityElement =
            new DXFSectionParserElement<(SimSlot, SimComponent)>(ParamStructTypes.ENTITY_SECTION, 
                new DXFEntityParserElementBase<(SimSlot, SimComponent)>[]
                {
                    ComponentEntityElement
                });

        #endregion


        #region Component Section

        /// <summary>
        /// Writes a component section
        /// </summary>
        /// <param name="collection">The component collection to serialize</param>
        /// <param name="writer">The DXF writer to write into</param>
        internal static void WriteComponentSection(IEnumerable<SimComponent> collection, DXFStreamWriter writer)
        {
            writer.StartSection(ParamStructTypes.ENTITY_SECTION);
            foreach (var comp in collection)
            {
                ComponentDxfIOComponents.WriteComponent(comp, writer, SimSlot.Invalid);
            }
            writer.EndSection();
        }
        /// <summary>
        /// Reads a component section. The results are stored in <see cref="DXFParserInfo.ProjectData"/>
        /// </summary>
        /// <param name="reader">The DXF reader to read from</param>
        /// <param name="info">Info for the parser</param>
        internal static void ReadComponentSection(DXFStreamReader reader, DXFParserInfo info)
        {
            var components = ComponentDxfIOComponents.ComponentSectionEntityElement.Parse(reader, info);

            info.ProjectData.Components.StartLoading();
            foreach (var comp in components)
            {
                if (comp.Item2 != null)
                    info.ProjectData.Components.Add(comp.Item2);
            }
            info.ProjectData.Components.EndLoading();
        }

        #endregion

        #region Components

        /// <summary>
        /// Writes a component to the DXF stream
        /// </summary>
        /// <param name="component">The component to serialize</param>
        /// <param name="writer">The writer into which the data should be written</param>
        /// <param name="childSlot">The slot inside the parent component, or <see cref="SimSlot.Invalid"/> when the 
        /// component is a root component</param>
        internal static void WriteComponent(SimComponent component, DXFStreamWriter writer, SimSlot childSlot)
        {
            if (component == null)
                throw new ArgumentNullException(nameof(component));
            if (writer == null)
                throw new ArgumentNullException(nameof(writer));

            //Start complex entity (does nothing)
            writer.StartComplexEntity();

            //Header
            writer.Write(ParamStructCommonSaveCode.ENTITY_START, ParamStructTypes.COMPONENT);

            if (childSlot != SimSlot.Invalid)
                writer.Write(ParamStructCommonSaveCode.ENTITY_KEY, childSlot);

            writer.Write(ParamStructCommonSaveCode.CLASS_NAME, typeof(SimComponent));

            //Body
            writer.Write(ParamStructCommonSaveCode.ENTITY_LOCAL_ID, component.Id.LocalId);
            writer.Write(ComponentSaveCode.NAME, component.Name);
            writer.WriteMultilineText(ComponentSaveCode.DESCRIPTION, component.Description);
            writer.Write(ComponentSaveCode.GENERATED_AUTOMATICALLY, component.IsAutomaticallyGenerated);
            writer.Write(ComponentSaveCode.CATEGORY, component.Category);

            writer.Write(ComponentSaveCode.ACCESS_STATE, component.AccessLocal.ProfileState);
            writer.WriteEntitySequence(ComponentSaveCode.PROFILE, component.AccessLocal, WriteProfileEntry);

            writer.Write(ComponentSaveCode.CURRENT_SLOT, component.CurrentSlot.Base);
            writer.Write(ComponentSaveCode.COLOR, component.ComponentColor);

            //Sub Components
            writer.WriteEntitySequence(ComponentSaveCode.CONTAINED_COMPONENTS, component.Components.Where(x => x.Component != null),
                (entry, iwriter) => WriteComponent(entry.Component, iwriter, entry.Slot));

            //Component Placeholder
            writer.WriteArray(ComponentSaveCode.CONTAINED_COMPONENT_SLOTS, component.Components.Where(x => x.Component == null),
                (entry, iwriter) =>
                {
                    iwriter.Write(ParamStructCommonSaveCode.STRING_VALUE, entry.Slot);
                });

            //Referenced Components
            writer.WriteArray(ComponentSaveCode.REFERENCED_COMPONENTS, component.ReferencedComponents, WriteComponentReference);

            //Parameters
            writer.WriteEntitySequence(ComponentSaveCode.CONTAINED_PARAMETERS, component.Parameters, WriteParameter);

            //Calculations
            writer.WriteEntitySequence(ComponentSaveCode.CONTAINED_CALCULATIONS, component.Calculations, WriteCalculation);

            //Instances
            writer.Write(ComponentSaveCode.INSTANCE_TYPE, component.InstanceType);
            writer.WriteEntitySequence(ComponentSaveCode.INSTANCES, component.Instances, WriteInstance);

            //Mappings
            writer.WriteEntitySequence(ComponentSaveCode.CALCULATOR_MAPPINGS, component.CalculatorMappings, 
                (item, iwriter) => WriteMapping(item, iwriter, component));

            //Excel Mapping
            writer.WriteEntitySequence(ComponentSaveCode.MAPPINGS_TO_EXCEL_TOOLS, component.MappingsPerExcelTool.Values,
                WriteExcelComponentMapping);

            //Chat
            writer.WriteEntitySequence(ChatItemSaveCode.CONVERSATION, component.Conversation.TopItems,
                (item, iwriter) => WriteChatItem(item.Value, iwriter));

            writer.Write(ComponentSaveCode.VISIBILTY, component.Visibility);
            writer.Write(ComponentSaveCode.SORTING_TYPE, component.SortingType);


            //End Complex Entity
            writer.EndComplexEntity();
        }
        private static (SimSlot, SimComponent) ParseComponent(DXFParserResultSet data, DXFParserInfo info)
        {
            var slot = data.Get<SimSlot>(ParamStructCommonSaveCode.ENTITY_KEY, SimSlot.Invalid);

            var localId = data.Get<long>(ParamStructCommonSaveCode.ENTITY_LOCAL_ID, 0);
            localId = info.TranslateId(typeof(SimComponent), localId);

            var name = data.Get<string>(ComponentSaveCode.NAME, string.Empty);
            var description = data.Get<string>(ComponentSaveCode.DESCRIPTION, string.Empty);
            var isAutogenerated = data.Get<bool>(ComponentSaveCode.GENERATED_AUTOMATICALLY, false);
            string currentSlot = data.Get<string>(ComponentSaveCode.CURRENT_SLOT, SimDefaultSlots.Undefined);

            Color color = Colors.Black;
            if (info.FileVersion >= 12)
                color = data.Get<Color>(ComponentSaveCode.COLOR, Colors.Black);
            else
                color = data.Get<Color[]>(ComponentSaveCode.COLOR, new Color[] { Colors.Black }).First();

            var containedComponents = data.Get<(SimSlot, SimComponent)[]>(ComponentSaveCode.CONTAINED_COMPONENTS,
                new (SimSlot, SimComponent)[0]).ToList();
            var containedSlots = data.Get<SimSlot[]>(ComponentSaveCode.CONTAINED_COMPONENT_SLOTS, new SimSlot[0]);
            foreach (var cs in containedSlots)
                containedComponents.Add((cs, null));

            var containedParameters = data.Get<SimParameter[]>(ComponentSaveCode.CONTAINED_PARAMETERS, new SimParameter[0]);

            var references = data.Get<SimComponentReference[]>(ComponentSaveCode.REFERENCED_COMPONENTS, new SimComponentReference[0]);

            var calculations = data.Get<CalculationInitializationData[]>(ComponentSaveCode.CONTAINED_CALCULATIONS,
                new CalculationInitializationData[0]);

            var instanceType = data.Get<SimInstanceType>(ComponentSaveCode.INSTANCE_TYPE, SimInstanceType.None);
            var instances = data.Get<SimComponentInstance[]>(ComponentSaveCode.INSTANCES, new SimComponentInstance[0]);

            var mappings = data.Get<CalculatorMapping[]>(ComponentSaveCode.CALCULATOR_MAPPINGS, new CalculatorMapping[0]);
            var accessProfileEntries = data.Get<SimAccessProfileEntry[]>(ComponentSaveCode.PROFILE, new SimAccessProfileEntry[0]);

            var excelMappings = data.Get<ExcelComponentMapping[]>(ComponentSaveCode.MAPPINGS_TO_EXCEL_TOOLS, new ExcelComponentMapping[0]);

            var chat = data.Get<SimChatItem[]>(ChatItemSaveCode.CONVERSATION, new SimChatItem[0]);

            var visibility = data.Get<SimComponentVisibility>(ComponentSaveCode.VISIBILTY, SimComponentVisibility.Hidden);
            var sorting = data.Get<SimComponentContentSorting>(ComponentSaveCode.SORTING_TYPE, SimComponentContentSorting.ByName);

            if (info.FileVersion < 7) //Default Instance and InstanceType
            {
                //Instance Type
                if (instanceType == SimInstanceType.None && instances.Length > 0)
                    instanceType = instances[0].InstanceType;

                //Default Instance
                if (instances.Length == 1 && instances[0].State.IsRealized == false && instances[0].Placements.Count == 0)
                {
                    instances = new SimComponentInstance[0];
                }
            }
            if (info.FileVersion < 10) //Set parameters to auto propagate for old composite components
            {
                if (instanceType == SimInstanceType.AttributesFace)
                {
                    var propagationParameter = containedParameters.FirstOrDefault(x => x.Name == ReservedParameters.RP_INST_PROPAGATE);
                    if (propagationParameter != null)
                    {
                        propagationParameter.ValueCurrent = 1.0;
                    }

                    //Reset instance parameters for propagating params
                    foreach (var param in containedParameters.
                        Where(x => x.InstancePropagationMode != SimParameterInstancePropagation.PropagateNever))
                    {
                        foreach (var instance in instances)
                        {
                            // as of version 11 the propagation parameter might not exist anymore, make sure this is set correctly
                            instance.PropagateParameterChanges = true;
                            for (int i = 0; i < instance.LoadingParameterValuesPersistent.Count; ++i)
                            {
                                if (instance.LoadingParameterValuesPersistent[i].id.LocalId == param.Id.LocalId ||
                                    (instance.LoadingParameterValuesPersistent[i].id == SimId.Empty &&
                                     instance.LoadingParameterValuesPersistent[i].parameterName == param.Name))
                                {
                                    instance.LoadingParameterValuesPersistent.RemoveAt(i);
                                    i--;
                                }
                            }
                        }
                    }
                }
            }
            if (info.FileVersion < 11)
            {
                //Instance propagation parameter
                var propagationParameter = containedParameters.FirstOrDefault(x => x.Name == ReservedParameters.RP_INST_PROPAGATE);
                if (propagationParameter != null)
                {
                    foreach (var instance in instances)
                    {
                        instance.PropagateParameterChanges = propagationParameter.ValueCurrent != 0;
                    }
                    containedParameters = containedParameters.Where(x => x != propagationParameter).ToArray();
                }
            }
            if (info.FileVersion < 12) //Split slot because it could contain an extension text
            {
                currentSlot = SimDefaultSlots.SplitExtensionSlot(currentSlot).slot;
            }

            try
            {
                var component = new SimComponent(info.GlobalId, localId, name, description,
                    isAutogenerated,
                    new SimAccessProfile(accessProfileEntries),
                    new SimSlotBase(currentSlot), containedComponents,
                    references, containedParameters,
                    calculations, instanceType, instances,
                    mappings, excelMappings,
                    chat, visibility, color,
                    sorting);
                return (slot, component);
            }
            catch (Exception e)
            {
                info.Log(string.Format("Failed to load Component with Id={0}, Name=\"{1}\"\nException: {2}\nStackTrace:\n{3}",
                    localId, name, e.Message, e.StackTrace
                    ));
            }

            return (SimSlot.Invalid, null);
        }

        private static void WriteComponentReference(SimComponentReference reference, DXFStreamWriter writer)
        {
            writer.Write(ParamStructCommonSaveCode.STRING_VALUE, reference.Slot);
            writer.Write(ParamStructCommonSaveCode.X_VALUE, reference.TargetId.LocalId);
            writer.WriteGlobalId(ParamStructCommonSaveCode.Y_VALUE, reference.TargetId.GlobalId, reference.Owner.Id.GlobalId);
        }
        private static SimComponentReference ParseComponentReference(DXFParserResultSet data, DXFParserInfo info)
        {
            var slot = data.Get<SimSlot>(ParamStructCommonSaveCode.STRING_VALUE, SimSlot.Invalid);

            var refId = data.GetSimId(ParamStructCommonSaveCode.Y_VALUE, ParamStructCommonSaveCode.X_VALUE, info.GlobalId);
            refId = info.TranslateId(typeof(SimComponent), refId);

            if (info.FileVersion < 12 && info.GlobalId == Guid.Empty)
                refId = new SimId(Guid.Empty, refId.LocalId);

            try
            {
                return new SimComponentReference(slot, refId);
            }
            catch (Exception e)
            {
                info.Log(string.Format("Failed to load reference with TargetId={0}:{1}, Slot={4}\nException: {2}\nStackTrace:\n{3}",
                    refId.GlobalId, refId.LocalId, e.Message, e.StackTrace, slot
                    ));
                return null;
            }            
        }

        #endregion

        #region Parameters

        /// <summary>
        /// Writes a component to the DXF stream
        /// </summary>
        /// <param name="parameter">The parameter to serialize</param>
        /// <param name="writer">The writer into which the data should be written</param>
        internal static void WriteParameter(SimParameter parameter, DXFStreamWriter writer)
        {
            if (parameter == null)
                throw new ArgumentNullException(nameof(parameter));
            if (writer == null)
                throw new ArgumentNullException(nameof(writer));

            writer.Write(ParamStructCommonSaveCode.ENTITY_START, ParamStructTypes.PARAMETER);
            writer.Write(ParamStructCommonSaveCode.CLASS_NAME, typeof(SimParameter));
            writer.Write(ParamStructCommonSaveCode.ENTITY_LOCAL_ID, parameter.Id.LocalId);

            writer.Write(ParameterSaveCode.NAME, parameter.Name);
            writer.Write(ParameterSaveCode.UNIT, parameter.Unit);
            writer.Write(ParameterSaveCode.CATEGORY, parameter.Category);

            writer.Write(ParameterSaveCode.PROPAGATION, parameter.Propagation);
            writer.Write(ParameterSaveCode.INSTANCE_PROPAGATION, parameter.InstancePropagationMode);

            writer.Write(ParameterSaveCode.VALUE_MIN, parameter.ValueMin);
            writer.Write(ParameterSaveCode.VALUE_MAX, parameter.ValueMax);
            writer.Write(ParameterSaveCode.VALUE_CURRENT, parameter.ValueCurrent);
            writer.Write(ParameterSaveCode.VALUE_TEXT, parameter.TextValue);

            writer.Write(ParameterSaveCode.ALLOWED_OPERATIONS, parameter.AllowedOperations);
            writer.Write(ParameterSaveCode.IS_AUTOGENERATED, parameter.IsAutomaticallyGenerated);

            if (parameter.MultiValuePointer != null)
            {
                WriteMultiValuePointer(parameter.MultiValuePointer, writer);
            }
        }
        private static SimParameter ParseParameter(DXFParserResultSet data, DXFParserInfo info)
        {
            var localId = data.Get<long>(ParamStructCommonSaveCode.ENTITY_LOCAL_ID, 0);
            var name = data.Get<string>(ParameterSaveCode.NAME, "");
            var unit = data.Get<string>(ParameterSaveCode.UNIT, "");
            var category = data.Get<SimCategory>(ParameterSaveCode.CATEGORY, SimCategory.None);
            var infoFlow = data.Get<SimInfoFlow>(ParameterSaveCode.PROPAGATION, SimInfoFlow.Input);
            var instancePropagation = data.Get<SimParameterInstancePropagation>(ParameterSaveCode.INSTANCE_PROPAGATION, 
                SimParameterInstancePropagation.PropagateIfInstance);
            var valueMin = data.Get<double>(ParameterSaveCode.VALUE_MIN, double.NegativeInfinity);
            var valueMax = data.Get<double>(ParameterSaveCode.VALUE_MAX, double.NegativeInfinity);
            var valueCurrent = data.Get<double>(ParameterSaveCode.VALUE_CURRENT, double.NegativeInfinity);
            var valueText = data.Get<string>(ParameterSaveCode.VALUE_TEXT, "");
            var operations = data.Get<SimParameterOperations>(ParameterSaveCode.ALLOWED_OPERATIONS, SimParameterOperations.All);
            var isAutogenerated = data.Get<bool>(ParameterSaveCode.IS_AUTOGENERATED, false);

            if (info.FileVersion <= 0)
                operations |= SimParameterOperations.Move;

            var newId = info.GenerateNewId(typeof(SimParameter), localId, out bool idExists);

            //Warning when Id is not unique
            if (idExists)
            {
                var otherId = info.TranslateId(typeof(SimParameter), localId);

                var originalParameter = info.ProjectData.ParameterLibraryManager.ParameterRecord.FirstOrDefault(
                            x => x.Id.LocalId == otherId);
                if (originalParameter == null)
                {
                    originalParameter = info.ProjectData.IdGenerator.GetById<SimParameter>(
                        new SimId(info.ProjectData.Owner, otherId)
                        );
                }

                info.Log(string.Format("Multiple Parameters with Id {0} found. Name=\"{1}\" Other Parameter Name=\"{2}\"" +
                    " New Id current: {3}, New Id original: {4}",
                    localId, name,
                    originalParameter != null ? originalParameter.Name : "???",
                    newId, originalParameter != null ? originalParameter.Id.LocalId : -1
                    ));
            }

            localId = newId;

            try
            {
                var multiValuePointer = ParseMultiValuePointer(data, info);

                SimParameter parameter = new SimParameter(localId, name, unit,
                    category, infoFlow, valueCurrent, valueMin, valueMax, valueText, multiValuePointer,
                    operations, instancePropagation, isAutogenerated);
                return parameter;
            }
            catch (Exception e)
            {
                info.Log(string.Format("Failed to load Parameter with Id={0}, Name=\"{1}\"\nException: {2}\nStackTrace:\n{3}",
                    localId, name, e.Message, e.StackTrace
                    ));
            }

            return null;
        }

        /// <summary>
        /// Writes a MultiValue pointer to the DXF stream
        /// </summary>
        /// <param name="pointer">The MultiValue pointer to serialize</param>
        /// <param name="writer">The writer into which the data should be written</param>
        internal static void WriteMultiValuePointer(SimMultiValuePointer pointer, DXFStreamWriter writer)
        {
            if (pointer == null)
                throw new ArgumentNullException(nameof(pointer));

            double xAxis = 0.0, yAxis = 0.0, zAxis = 0.0;
            string graphName = String.Empty;

            if (pointer is SimMultiValueBigTable.SimMultiValueBigTablePointer btptr)
            {
                xAxis = btptr.Column; yAxis = btptr.Row;
            }
            else if (pointer is SimMultiValueField3D.SimMultiValueField3DPointer fieldptr)
            {
                xAxis = fieldptr.AxisValueX; yAxis = fieldptr.AxisValueY; zAxis = fieldptr.AxisValueZ;
            }
            else if (pointer is SimMultiValueFunction.MultiValueFunctionPointer funcptr)
            {
                xAxis = funcptr.AxisValueX; yAxis = funcptr.AxisValueY; graphName = funcptr.GraphName;
            }
            else
                throw new NotSupportedException("Unsupported MultiValue Type");

            writer.WriteGlobalId(MultiValueSaveCode.MVPTR_GLOBALID, pointer.ValueField.Id.GlobalId, pointer.TargetParameter.Id.GlobalId);
            writer.Write(MultiValueSaveCode.MVPTR_LOCALID, pointer.ValueField.Id.LocalId);
            writer.Write(MultiValueSaveCode.MVPTR_AXIS_X, xAxis);
            writer.Write(MultiValueSaveCode.MVPTR_AXIS_Y, yAxis);
            writer.Write(MultiValueSaveCode.MVPTR_AXIS_Z, zAxis);
            writer.Write(MultiValueSaveCode.MVPTR_GRAPHNAME, graphName);
        }
        private static SimMultiValuePointer ParseMultiValuePointer(DXFParserResultSet data, DXFParserInfo info)
        {
            var mvId = data.GetSimId(MultiValueSaveCode.MVPTR_GLOBALID, MultiValueSaveCode.MVPTR_LOCALID, info.GlobalId);
            mvId = info.TranslateId(typeof(SimMultiValue), mvId);

            if (info.FileVersion < 12 && info.GlobalId == Guid.Empty)
                mvId = new SimId(Guid.Empty, mvId.LocalId);

            var xAxis = data.Get<double>(MultiValueSaveCode.MVPTR_AXIS_X, 0.0);
            var yAxis = data.Get<double>(MultiValueSaveCode.MVPTR_AXIS_Y, 0.0);
            var zAxis = data.Get<double>(MultiValueSaveCode.MVPTR_AXIS_Z, 0.0);
            var graphName = data.Get<string>(MultiValueSaveCode.MVPTR_GRAPHNAME, string.Empty);

            if (mvId != SimId.Empty)
            {
                var mv = info.ProjectData.IdGenerator.GetById<SimMultiValue>(mvId);
                if (mv != null)
                {
                    try
                    {
                        var mvp = mv.CreateNewPointer();
                        mvp.SetFromParameters(xAxis, yAxis, zAxis, graphName);
                        return mvp;
                    }
                    catch (Exception e)
                    {
                        info.Log(string.Format("Failed to load MultiValuePointer with Target Id={0}\nException: {1}\nStackTrace:\n{2}",
                            mvId, e.Message, e.StackTrace
                            ));
                    }
                }
                else
                {
                    info.Log(string.Format("Failed to locate MultiValue with Id={0} while loading MultiValuePointer",
                            mvId
                            ));
                }
            }
            else if (info.FileVersion <= 0) //Check if it's an old project from before the ValuePointer refactoring
            {
                var mvRef = data.Get<long>(ParameterSaveCode.VALUE_FIELD_REF, 0);
                int[] mvCellIndices = new int[]
                {
                    data.Get<int>(MultiValueSaveCode.MVDisplayVector_CELL_INDEX_X, -1),
                    data.Get<int>(MultiValueSaveCode.MVDisplayVector_CELL_INDEX_Y, -1),
                    data.Get<int>(MultiValueSaveCode.MVDisplayVector_CELL_INDEX_Z, -1),
                };

                if (mvRef != 0)
                {
                    mvRef = info.TranslateId(typeof(SimMultiValue), mvRef);
                    var field = info.ProjectData.ValueManager.GetByID(Guid.Empty, mvRef);
                    // construct the pointer into the value field
                    if (field is SimMultiValueBigTable)
                    {
                        var table = (SimMultiValueBigTable)field;
                        var row = mvCellIndices[0];
                        if (row >= table.RowHeaders.Count)
                        {
                            row = table.RowHeaders.Count - 1;
                            info.Log(String.Format("Row index out of bounds for ValueField {0}", table.Name));
                        }
                        var column = mvCellIndices[1];
                        if (column >= table.ColumnHeaders.Count)
                        {
                            column = table.ColumnHeaders.Count - 1;
                            info.Log(string.Format("Column index out of bounds for ValueField {0}", table.Name));
                        }

                        return new SimMultiValueBigTable.SimMultiValueBigTablePointer(table, row, column);
                    }
                    else if (field is SimMultiValueFunction)
                    {
                        var function = (SimMultiValueFunction)field;

                        var graphIdx = mvCellIndices[0];
                        if (graphIdx >= function.Graphs.Count)
                        {
                            graphIdx = 0;
                            info.Log("Unable to find correct graph");
                        }
                        var graph = function.Graphs[graphIdx];

                        return new SimMultiValueFunction.MultiValueFunctionPointer(function,
                            graph.Name, graph.Points[0].X, 0.0);
                    }
                    else if (field is SimMultiValueField3D)
                    {
                        var table = (SimMultiValueField3D)field;

                        info.Log(String.Format("ValueField may be attached to a wrong location"));

                        return new SimMultiValueField3D.SimMultiValueField3DPointer(table,
                            mvCellIndices[0], mvCellIndices[1], mvCellIndices[2]
                            );
                    }
                }
            }

            return null;
        }

        #endregion

        #region Calculations

        /// <summary>
        /// Writes a calculation to the DXF stream
        /// </summary>
        /// <param name="calculation">The calculation to serialize</param>
        /// <param name="writer">The writer into which the data should be written</param>
        internal static void WriteCalculation(SimCalculation calculation, DXFStreamWriter writer)
        {
            if (calculation == null)
                throw new ArgumentNullException(nameof(calculation));

            writer.Write(ParamStructCommonSaveCode.ENTITY_START, ParamStructTypes.CALCULATION);
            writer.Write(ParamStructCommonSaveCode.CLASS_NAME, typeof(SimCalculation));
            writer.Write(ParamStructCommonSaveCode.ENTITY_LOCAL_ID, calculation.Id.LocalId);

            writer.Write(CalculationSaveCode.NAME, calculation.Name);
            writer.Write(CalculationSaveCode.EXPRESSION, calculation.Expression);

            writer.WriteArray(CalculationSaveCode.PARAMS_INPUT, calculation.InputParams, 
                (param, iwriter) => WriteCalculationParameterReference(param, calculation, iwriter));

            writer.WriteArray(CalculationSaveCode.PARAMS_OUTPUT, calculation.ReturnParams,
                (param, iwriter) => WriteCalculationParameterReference(param, calculation, iwriter));

            if (calculation.IsMultiValueCalculation)
            {
                List<MultiValueCalculationBinaryOperation> operations = new List<MultiValueCalculationBinaryOperation>();
                InOrderOperationSequence(calculation.MultiValueCalculation, operations);

                if (operations.Count > 0)
                {
                    writer.WriteArray(CalculationSaveCode.VECTOR_CALC_OPERATIONS, operations, (item, iwriter) =>
                    {
                        iwriter.Write(ParamStructCommonSaveCode.X_VALUE, item);
                    });
                }

                if (calculation.InputParams.Count > 0)
                {
                    writer.WriteArray(CalculationSaveCode.VECTOR_CALC_RANGES, calculation.InputParams, (item, iwriter) =>
                    {
                        var meta = calculation.InputParams.GetMetaData(item.Key);
                        WriteRowColumnRange(item.Key, meta.Range, iwriter);
                    });

                    writer.WriteArray(CalculationSaveCode.VECTOR_CALC_RANDOM, calculation.InputParams, (item, iwriter) =>
                    {
                        var meta = calculation.InputParams.GetMetaData(item.Key);
                        WriteRandomization(item.Key, meta, iwriter);
                    });
                }
            }

            writer.Write(CalculationSaveCode.VECTOR_CALC_ITERATION_COUNT, calculation.IterationCount);
            writer.Write(CalculationSaveCode.VECTOR_CALC_AGGREGATION, calculation.ResultAggregation);
            writer.Write(CalculationSaveCode.VECTOR_CALC_OVERRIDE, calculation.OverrideResult);
        }
        private static CalculationInitializationData ParseCalculation(DXFParserResultSet data, DXFParserInfo info)
        {
            var localId = data.Get<long>(ParamStructCommonSaveCode.ENTITY_LOCAL_ID, 0);

            var name = data.Get<string>(CalculationSaveCode.NAME, string.Empty);
            var expression = data.Get<string>(CalculationSaveCode.EXPRESSION, string.Empty);

            var inputParameters = data.Get<KeyValuePair<string, SimId>[]>(CalculationSaveCode.PARAMS_INPUT, new KeyValuePair<string, SimId>[0]);
            var returnParameters = data.Get<KeyValuePair<string, SimId>[]>(CalculationSaveCode.PARAMS_OUTPUT, new KeyValuePair<string, SimId>[0]);
            var operations = data.Get<MultiValueCalculationBinaryOperation[]>(CalculationSaveCode.VECTOR_CALC_OPERATIONS, null);

            var iterations = data.Get<int>(CalculationSaveCode.VECTOR_CALC_ITERATION_COUNT, 1);
            var overrideResults = data.Get<bool>(CalculationSaveCode.VECTOR_CALC_OVERRIDE, true);
            var resultAggregation = data.Get<SimResultAggregationMethod>(CalculationSaveCode.VECTOR_CALC_AGGREGATION, 
                SimResultAggregationMethod.Average);

            Dictionary<string, CalculationParameterMetaData> parameterMetaData = new Dictionary<string, CalculationParameterMetaData>();

            var ranges = data.Get<(string key, long paramid, RowColumnRange range)[]>(CalculationSaveCode.VECTOR_CALC_RANGES, new (string, long, RowColumnRange)[0]);
            foreach (var rangeEntry in ranges)
            {
                var key = rangeEntry.key;
                if (info.FileVersion <= 3)
                {
                    int paramIdx = inputParameters.FindIndex(x => x.Value.LocalId == rangeEntry.paramid);
                    if (paramIdx != -1)
                        key = inputParameters[paramIdx].Key;
                }

                if (key != String.Empty)
                {
                    if (parameterMetaData.TryGetValue(key, out var meta))
                        meta.Range = rangeEntry.range;
                    else
                    {
                        parameterMetaData.Add(key, new CalculationParameterMetaData()
                        {
                            Range = rangeEntry.range,
                            RandomizeDeviationMode = CalculationParameterMetaData.DeviationModeType.Relative,
                            RandomizeIsClamping = true,
                            RandomizeClampDeviation = 1.0,
                        });
                    }
                }
            }

            var randoms = data.Get<(string key, long paramid, double mean, double deviation, DeviationModeType mode, bool isRandom, bool isClamping, double clampDeviation)[]>
                (CalculationSaveCode.VECTOR_CALC_RANDOM, new (string, long, double, double, DeviationModeType, bool, bool, double)[0]);
            foreach (var randomEntry in randoms)
            {
                var key = randomEntry.key;
                if (info.FileVersion <= 3)
                {
                    int paramIdx = inputParameters.FindIndex(x => x.Value.LocalId == randomEntry.paramid);
                    if (paramIdx != -1)
                        key = inputParameters[paramIdx].Key;
                }

                if (key != String.Empty)
                {
                    if (!parameterMetaData.TryGetValue(key, out var meta))
                    {
                        meta = new CalculationParameterMetaData();
                        parameterMetaData.Add(key, meta);
                    }

                    meta.RandomizeRelativeMean = randomEntry.mean;
                    meta.RandomizeDeviation = randomEntry.deviation;
                    meta.RandomizeDeviationMode = randomEntry.mode;
                    meta.IsRandomized = randomEntry.isRandom;
                    meta.RandomizeIsClamping = randomEntry.isClamping;
                    meta.RandomizeClampDeviation = randomEntry.clampDeviation;
                }
            }

            //Add missing metadata (V <= 3)
            if (info.FileVersion <= 3)
            {
                foreach (var param in inputParameters)
                {
                    if (!parameterMetaData.ContainsKey(param.Key))
                    {
                        parameterMetaData.Add(param.Key, new CalculationParameterMetaData()
                        {
                            RandomizeDeviationMode = CalculationParameterMetaData.DeviationModeType.Relative,
                            RandomizeIsClamping = true,
                            RandomizeClampDeviation = 1.0,
                        });
                    }
                }
            }


            //Id translation
            var newId = info.GenerateNewId(typeof(SimCalculation), localId, out bool idExists);

            //Warning when Id is not unique
            if (idExists)
            {
                var otherId = info.TranslateId(typeof(SimCalculation), localId);

                var originalCalc = info.ProjectData.IdGenerator.GetById<SimCalculation>(
                    new SimId(info.ProjectData.Owner, otherId)
                    );

                info.Log(string.Format("Multiple Calculations with Id {0} found. Name=\"{1}\" Other Calculation Name=\"{2}\"" +
                    " New Id current: {3}, New Id original: {4}",
                    localId, name,
                    originalCalc != null ? originalCalc.Name : "???",
                    newId, originalCalc.Id.LocalId
                    ));
            }


            try
            {
                return new CalculationInitializationData(newId, name, expression,
                    inputParameters.ToDictionary(x => x.Key, x => x.Value),
                    returnParameters.ToDictionary(x => x.Key, x => x.Value),
                    operations, parameterMetaData, iterations, resultAggregation, overrideResults);
            }
            catch (Exception e)
            {
                info.Log(string.Format("Failed to load Calculation with Id={0}, Name=\"{1}\"\nException: {2}\nStackTrace:\n{3}",
                   localId, name, e.Message, e.StackTrace
                   ));
            }

            return null;
        }
        
        private static void WriteCalculationParameterReference(KeyValuePair<string, SimParameter> param, SimCalculation calculation,
            DXFStreamWriter writer)
        {
            writer.Write(ParamStructCommonSaveCode.STRING_VALUE, param.Key);

            var id = SimId.Empty;
            if (param.Value != null)
                id = param.Value.Id;

            writer.WriteGlobalId(ParamStructCommonSaveCode.ENTITY_KEY, id.GlobalId, calculation.Id.GlobalId);
            writer.Write(ParamStructCommonSaveCode.ENTITY_REF, id.LocalId);
        }
        private static KeyValuePair<string, SimId> ParseCalculationParameterReference(DXFParserResultSet data, DXFParserInfo info)
        {
            var key = data.Get<string>(ParamStructCommonSaveCode.STRING_VALUE, string.Empty);

            var id = SimId.Empty;

            if (info.FileVersion >= 12)
            {
                id = data.GetSimId(ParamStructCommonSaveCode.ENTITY_KEY, ParamStructCommonSaveCode.ENTITY_REF, info.GlobalId);
            }
            else
            {
                var localId = data.Get<string>(ParamStructCommonSaveCode.ENTITY_REF, "NULL");
                if (localId == "NULL")
                    id = SimId.Empty;
                else if (long.TryParse(localId, out var localIdLong))
                {
                    if (localIdLong != 0)
                        id = new SimId(info.GlobalId, localIdLong);
                    else
                        id = SimId.Empty;
                }
            }

            //Translate parameter Ids
            id = info.TranslateId(typeof(SimParameter), id);

            return new KeyValuePair<string, SimId>(key, id);
        }

        private static void WriteRowColumnRange(string key, RowColumnRange range, DXFStreamWriter writer)
        {
            writer.Write(ParamStructCommonSaveCode.V5_VALUE, key);
            writer.Write(ParamStructCommonSaveCode.X_VALUE, range.RowStart);
            writer.Write(ParamStructCommonSaveCode.Y_VALUE, range.RowCount);
            writer.Write(ParamStructCommonSaveCode.Z_VALUE, range.ColumnStart);
            writer.Write(ParamStructCommonSaveCode.W_VALUE, range.ColumnCount);
        }
        private static (string, long, RowColumnRange) ParseRowColumnRange(DXFParserResultSet data, DXFParserInfo info)
        {
            string key = string.Empty;
            long paramId = -1L;

            if (info.FileVersion <= 3)
            {
                //Instead of the key, the id of the referenced parameter was stored
                paramId = info.TranslateId(typeof(SimParameter), data.Get<long>(ParamStructCommonSaveCode.V5_VALUE, -1L));
            }
            else
                key = data.Get<string>(ParamStructCommonSaveCode.V5_VALUE, string.Empty);

            var rowStart = data.Get<int>(ParamStructCommonSaveCode.X_VALUE, 0);
            var rowCount = data.Get<int>(ParamStructCommonSaveCode.Y_VALUE, int.MaxValue);
            var columnStart = data.Get<int>(ParamStructCommonSaveCode.Z_VALUE, 0);
            var columnCount = data.Get<int>(ParamStructCommonSaveCode.W_VALUE, int.MaxValue);

            if (info.FileVersion <= 3)
            {
                //1-based starts
                rowStart -= 1;
                columnStart -= 1;

                //count contains end index instead of count
                if (rowCount != int.MaxValue)
                    rowCount -= rowStart;
                if (columnCount != int.MaxValue)
                    columnCount -= columnStart;
            }

            return (key, paramId, new RowColumnRange(rowStart, columnStart, rowCount, columnCount));

        }

        private static void WriteRandomization(string key, CalculationParameterMetaData meta, DXFStreamWriter writer)
        {
            writer.Write(ParamStructCommonSaveCode.V5_VALUE, key);
            writer.Write(ParamStructCommonSaveCode.X_VALUE, meta.RandomizeRelativeMean);
            writer.Write(ParamStructCommonSaveCode.Y_VALUE, meta.RandomizeDeviation);
            writer.Write(ParamStructCommonSaveCode.Z_VALUE, meta.RandomizeDeviationMode);
            writer.Write(ParamStructCommonSaveCode.W_VALUE, meta.IsRandomized);
            writer.Write(ParamStructCommonSaveCode.V6_VALUE, meta.RandomizeIsClamping);
            writer.Write(ParamStructCommonSaveCode.V7_VALUE, meta.RandomizeClampDeviation);
        }
        private static (string key, long paramid, double mean, double deviation, DeviationModeType mode, bool isRandom, bool isClamping, double clampDeviation) 
            ParseRandomization(DXFParserResultSet data, DXFParserInfo info)
        {
            string key = string.Empty;
            long paramid = -1;

            if (info.FileVersion <= 3)
                paramid = info.TranslateId(typeof(SimParameter), data.Get<long>(ParamStructCommonSaveCode.V5_VALUE, -1L));
            else
                key = data.Get<string>(ParamStructCommonSaveCode.V5_VALUE, string.Empty);

            var mean = data.Get<double>(ParamStructCommonSaveCode.X_VALUE, 1.0);
            var deviation = data.Get<double>(ParamStructCommonSaveCode.Y_VALUE, 1.0);
            var mode = data.Get<DeviationModeType>(ParamStructCommonSaveCode.Z_VALUE, DeviationModeType.Relative);
            var isRandom = data.Get<bool>(ParamStructCommonSaveCode.W_VALUE, false);
            var isClamping = data.Get<bool>(ParamStructCommonSaveCode.V6_VALUE, true);
            var clampDeviation = data.Get<double>(ParamStructCommonSaveCode.V7_VALUE, 1.0);

            return (key, paramid, mean, deviation, mode, isRandom, isClamping, clampDeviation);
        }


        private static void InOrderOperationSequence(SimMultiValueExpression operand, List<MultiValueCalculationBinaryOperation> result)
        {
            if (operand is SimMultiValueExpressionBinary step)
            {
                InOrderOperationSequence(step.Left, result);

                result.Add(step.Operation);

                InOrderOperationSequence(step.Right, result);
            }
        }


        #endregion

        #region Instances

        /// <summary>
        /// Writes an instance to the DXF stream
        /// </summary>
        /// <param name="instance">The instance to serialize</param>
        /// <param name="writer">The writer into which the data should be written</param>
        internal static void WriteInstance(SimComponentInstance instance, DXFStreamWriter writer)
        {
            if (instance == null)
                throw new ArgumentNullException(nameof(instance));

            writer.Write(ParamStructCommonSaveCode.ENTITY_START, ParamStructTypes.COMPONENT_INSTANCE);
            writer.Write(ParamStructCommonSaveCode.CLASS_NAME, typeof(SimComponentInstance));
            writer.Write(ParamStructCommonSaveCode.ENTITY_LOCAL_ID, instance.Id.LocalId);

            writer.Write(ComponentInstanceSaveCode.NAME, instance.Name);
            writer.Write(ComponentInstanceSaveCode.INSTANCE_TYPE, instance.InstanceType);
            writer.Write(ComponentInstanceSaveCode.STATE_ISREALIZED, instance.State.IsRealized);
            writer.Write(ComponentInstanceSaveCode.STATE_CONNECTION_STATE, instance.State.ConnectionState);

            writer.WriteEntitySequence(ComponentInstanceSaveCode.INST_PLACEMENTS, instance.Placements, WritePlacement);

            writer.Write(ComponentInstanceSaveCode.INST_ROTATION, instance.InstanceRotation);

            //Size

            double[] sizes = new double[]
            {
                instance.InstanceSize.Min.X, instance.InstanceSize.Min.Y, instance.InstanceSize.Min.Z,
                instance.InstanceSize.Max.X, instance.InstanceSize.Max.Y, instance.InstanceSize.Max.Z,
            };
            writer.WriteArray(ComponentInstanceSaveCode.INST_SIZE, sizes, (item, iwriter) =>
            {
                iwriter.Write(ParamStructCommonSaveCode.X_VALUE, item);
            });

            writer.WriteArray(ComponentInstanceSaveCode.INST_SIZE_TRANSFERSETTINGS, instance.SizeTransfer, (item, iwriter) =>
            {
                writer.Write(ComponentInstanceSaveCode.INST_SIZE_TS_SOURCE, item.Source);
                if (item.Source == SimInstanceSizeTransferSource.Parameter && item.Parameter != null)
                {
                    writer.Write(ComponentInstanceSaveCode.INST_SIZE_TS_PARAMETER_LOCALID, item.Parameter.Id.LocalId);
                    writer.WriteGlobalId(ComponentInstanceSaveCode.INST_SIZE_TS_PARAMETER_GLOBALID, item.Parameter.Id.GlobalId,
                        instance.Id.GlobalId);
                }
                writer.Write(ComponentInstanceSaveCode.INST_SIZE_TS_ADDEND, item.Addend);
            });

            //Path
            writer.WriteArray(ComponentInstanceSaveCode.INST_PATH, instance.InstancePath, (item, iwriter) => 
            {
                iwriter.Write(ParamStructCommonSaveCode.X_VALUE, item.X);
                iwriter.Write(ParamStructCommonSaveCode.Y_VALUE, item.Y);
                iwriter.Write(ParamStructCommonSaveCode.Z_VALUE, item.Z);
            });

            //Parameters
            writer.WriteArray(ComponentInstanceSaveCode.INST_PARAMS, instance.InstanceParameterValuesPersistent, (item, iwriter) =>
            {
                iwriter.Write(ComponentInstanceSaveCode.INST_PARAM_ID, item.Key.Id.LocalId);
                iwriter.Write(ComponentInstanceSaveCode.INST_PARAM_VAL, item.Value);
            });

            writer.Write(ComponentInstanceSaveCode.INST_PROPAGATE_PARAM_CHANGES, instance.PropagateParameterChanges);
        }
        private static SimComponentInstance ParseInstance(DXFParserResultSet data, DXFParserInfo info)
        {
            var localId = data.Get<long>(ParamStructCommonSaveCode.ENTITY_LOCAL_ID, 0);
            localId = info.TranslateId(typeof(SimComponentInstance), localId);

            var name = data.Get<string>(ComponentInstanceSaveCode.NAME, string.Empty);
            var instanceType = data.Get<SimInstanceType>(ComponentInstanceSaveCode.INSTANCE_TYPE, SimInstanceType.None);

            var isRealized = data.Get<bool>(ComponentInstanceSaveCode.STATE_ISREALIZED, false);
            var state = data.Get<SimInstanceConnectionState>(ComponentInstanceSaveCode.STATE_CONNECTION_STATE, SimInstanceConnectionState.Ok);

            //Placements
            SimInstancePlacement[] placements = null;

            if (info.FileVersion >= 12)
                placements = data.Get<SimInstancePlacement[]>(ComponentInstanceSaveCode.INST_PLACEMENTS, new SimInstancePlacement[0]);
            else //Old Placement handling
            {
                var networkLocalId = data.Get<long>(ComponentInstanceSaveCode.INST_NETWORKELEMENT_ID, -1);
                var networkGlobalId = data.Get<Guid>(ComponentInstanceSaveCode.INST_NETWORKELEMENT_LOCATION, Guid.Empty);

                bool hasNetwork = networkLocalId != 0 && networkGlobalId != Guid.Empty;

                var geometryFileId = data.Get<int>(ComponentInstanceSaveCode.GEOM_REF_FILE, -1);
                var geometryId = data.Get<ulong>(ComponentInstanceSaveCode.GEOM_REF_ID, 0);

                bool hasGeometry = geometryFileId != -1 && geometryId != 0;

                int pCount = 0;
                if (hasNetwork)
                    pCount++;
                if (hasGeometry)
                    pCount++;

                placements = new SimInstancePlacement[pCount];

                int idx = 0;
                if (hasGeometry)
                {
                    placements[idx] = new SimInstancePlacementGeometry(geometryFileId, geometryId);
                    idx++;
                }
                if (hasNetwork)
                {
                    placements[idx] = new SimInstancePlacementNetwork(new SimObjectId(networkGlobalId, networkLocalId));
                    idx++;
                }
            }


            var rotation = data.Get<Quaternion>(ComponentInstanceSaveCode.INST_ROTATION, Quaternion.Identity);
            var sizes = data.Get<double[]>(ComponentInstanceSaveCode.INST_SIZE, new double[6]);

            var sizeTransferItems = data.Get<SimInstanceSizeTransferDefinitionItem[]>(ComponentInstanceSaveCode.INST_SIZE_TRANSFERSETTINGS,
                new SimInstanceSizeTransferDefinitionItem[6]);

            if (sizeTransferItems.Length <= 0 && info.FileVersion <= 7) //Happened in old version
            {
                sizeTransferItems = new SimInstanceSizeTransferDefinitionItem[6];
                for (int i = 0; i < 6; i++)
                    sizeTransferItems[i] = new SimInstanceSizeTransferDefinitionItem(SimInstanceSizeTransferSource.User, null, 0.0);
            }
            if (sizes.Length <= 0 && info.FileVersion <= 7)
            {
                sizes = new double[6];
            }

            var sizeTransferDef = new SimInstanceSizeTransferDefinition(sizeTransferItems);

            var parameters = data.Get<(SimId, string, double)[]>(ComponentInstanceSaveCode.INST_PARAMS, new (SimId, string, double)[0]);
            bool propagate = data.Get<bool>(ComponentInstanceSaveCode.INST_PROPAGATE_PARAM_CHANGES, false);

            var path = data.Get<Point3D[]>(ComponentInstanceSaveCode.INST_PATH, new Point3D[0]);
            if (info.FileVersion <= 6 && path.Length > 0)
            {
                path = path.Skip(1).ToArray();
            }

            try
            {
                return new SimComponentInstance(localId, name, instanceType,
                    new SimInstanceState(isRealized, state),
                    placements, rotation,
                    new SimInstanceSize(new Vector3D(sizes[0], sizes[1], sizes[2]), new Vector3D(sizes[3], sizes[4], sizes[5])),
                    sizeTransferDef, path, new List<(SimId, string, double)>(parameters), propagate);
            }
            catch (Exception e)
            {
                info.Log(string.Format("Failed to load Instance with Id={0}, Name=\"{1}\"\nException: {2}\nStackTrace:\n{3}",
                    localId, name, e.Message, e.StackTrace
                    ));
            }

            return null;
        }


        private static void WritePlacement(SimInstancePlacement placement, DXFStreamWriter writer)
        {
            writer.StartComplexEntity();

            if (placement is SimInstancePlacementGeometry gp)
            {
                writer.Write(ParamStructCommonSaveCode.ENTITY_START, ParamStructTypes.INSTANCE_PLACEMENT_GEOMETRY);
                writer.Write(ParamStructCommonSaveCode.CLASS_NAME, typeof(SimInstancePlacementGeometry));
                writer.Write(ComponentInstanceSaveCode.GEOM_REF_FILE, gp.FileId);
                writer.Write(ComponentInstanceSaveCode.GEOM_REF_ID, gp.GeometryId);
            }
            else if (placement is SimInstancePlacementNetwork np)
            {
                writer.Write(ParamStructCommonSaveCode.ENTITY_START, ParamStructTypes.INSTANCE_PLACEMENT_NETWORK);
                writer.Write(ParamStructCommonSaveCode.CLASS_NAME, typeof(SimInstancePlacementNetwork));
                writer.Write(ComponentInstanceSaveCode.INST_NETWORKELEMENT_ID, np.NetworkElement.ID.LocalId);
                writer.WriteGlobalId(ComponentInstanceSaveCode.INST_NETWORKELEMENT_LOCATION, np.NetworkElement.ID.GlobalId, 
                    np.Instance.Id.GlobalId);
            }
            else if (placement is SimInstancePlacementSimNetwork snp)
            {
                writer.Write(ParamStructCommonSaveCode.ENTITY_START, ParamStructTypes.INSTANCE_PLACEMENT_SIMNETWORK);
                writer.Write(ParamStructCommonSaveCode.CLASS_NAME, typeof(SimInstancePlacementSimNetwork));
                writer.Write(ComponentInstanceSaveCode.INST_NETWORKELEMENT_ID, snp.NetworkElement.Id.LocalId);
                writer.WriteGlobalId(ComponentInstanceSaveCode.INST_NETWORKELEMENT_LOCATION, snp.NetworkElement.Id.GlobalId,
                    snp.Instance.Id.GlobalId);
            }

            writer.EndComplexEntity();
        }
        private static SimInstancePlacementNetwork ParseNetworkPlacement(DXFParserResultSet data, DXFParserInfo info)
        {
            var networkLocalId = data.Get<long>(ComponentInstanceSaveCode.INST_NETWORKELEMENT_ID, 0);
            var networkGlobalId = data.Get<Guid>(ComponentInstanceSaveCode.INST_NETWORKELEMENT_LOCATION, Guid.Empty);

            if (networkLocalId != 0 && networkGlobalId == Guid.Empty)
                networkGlobalId = info.GlobalId;

            try
            {
                return new SimInstancePlacementNetwork(new SimObjectId(networkGlobalId, networkLocalId));
            }
            catch (Exception e)
            {
                info.Log(String.Format("Failed to load network placement targeting {0}:{1}\nReason:{2}\n{3}",
                    networkLocalId, networkGlobalId, e.Message, e.StackTrace));
            }
            return null;
        }
        private static SimInstancePlacementSimNetwork ParseSimNetworkPlacement(DXFParserResultSet data, DXFParserInfo info)
        {
            var networkLocalId = data.Get<long>(ComponentInstanceSaveCode.INST_NETWORKELEMENT_ID, 0);
            var networkGlobalId = data.Get<Guid>(ComponentInstanceSaveCode.INST_NETWORKELEMENT_LOCATION, Guid.Empty);

            if (networkLocalId != 0 && networkGlobalId == Guid.Empty)
                networkGlobalId = info.GlobalId;

            try
            {
                return new SimInstancePlacementSimNetwork(new SimId(networkGlobalId, networkLocalId));
            }
            catch (Exception e)
            {
                info.Log(String.Format("Failed to load network placement targeting {0}:{1}\nReason:{2}\n{3}",
                    networkLocalId, networkGlobalId, e.Message, e.StackTrace));
            }
            return null;
        }
        private static SimInstancePlacementGeometry ParseGeometryPlacement(DXFParserResultSet data, DXFParserInfo info)
        {
            var fileKey = data.Get<int>(ComponentInstanceSaveCode.GEOM_REF_FILE, -1);
            var geometryId = data.Get<ulong>(ComponentInstanceSaveCode.GEOM_REF_ID, 0U);

            try
            {
                return new SimInstancePlacementGeometry(fileKey, geometryId);
            }
            catch (Exception e)
            {
                info.Log(String.Format("Failed to load geometry placement targeting file {0}, geometry {1}\nReason:{2}\n{3}",
                    fileKey, geometryId, e.Message, e.StackTrace));
            }
            return null;
        }

        private static SimInstanceSizeTransferDefinitionItem ParseSizeTransferDefinition(DXFParserResultSet data, DXFParserInfo info)
        {
            SimInstanceSizeTransferSource source = data.Get<SimInstanceSizeTransferSource>(
                ComponentInstanceSaveCode.INST_SIZE_TS_SOURCE, SimInstanceSizeTransferSource.User);
            double added = data.Get<double>(ComponentInstanceSaveCode.INST_SIZE_TS_ADDEND, 0.0);

            SimId simId = SimId.Empty;
            string parameterName = "";

            if (source == SimInstanceSizeTransferSource.Parameter)
            {
                if (info.FileVersion >= 8)
                {
                    simId = data.GetSimId(ComponentInstanceSaveCode.INST_SIZE_TS_PARAMETER_GLOBALID,
                        ComponentInstanceSaveCode.INST_SIZE_TS_PARAMETER_LOCALID, info.GlobalId);
                }
                else
                {
                    parameterName = data.Get<string>(ComponentInstanceSaveCode.INST_SIZE_TS_PARAMETER_LOCALID, "");
                }
            }

            return new SimInstanceSizeTransferDefinitionItem(source, simId, parameterName, added);
        }

        #endregion

        #region Component Mappings

        /// <summary>
        /// Writes a calculator mapping to the DXF stream
        /// </summary>
        /// <param name="mapping">The calculator mapping to serialize</param>
        /// <param name="writer">The writer into which the data should be written</param>
        /// <param name="owner">The component which owns the mapping</param>
        internal static void WriteMapping(CalculatorMapping mapping, DXFStreamWriter writer, SimComponent owner)
        {
            writer.Write(ParamStructCommonSaveCode.ENTITY_START, ParamStructTypes.MAPPING_TO_COMP);
            writer.Write(ParamStructCommonSaveCode.CLASS_NAME, typeof(CalculatorMapping));

            writer.Write(CalculatorMappingSaveCode.NAME, mapping.Name);
            writer.Write(CalculatorMappingSaveCode.CALCULATOR_LOCALID, mapping.Calculator.Id.LocalId);
            writer.WriteGlobalId(CalculatorMappingSaveCode.CALCULATOR_GLOBALID, mapping.Calculator.Id.GlobalId, owner.Id.GlobalId);

            writer.WriteArray(CalculatorMappingSaveCode.INPUT_MAPPING, mapping.InputMapping, (item, iwriter) =>
            {
                iwriter.Write(CalculatorMappingSaveCode.INPUT_DATAPARAMETER_LOCALID, item.DataParameter.Id.LocalId);
                iwriter.WriteGlobalId(CalculatorMappingSaveCode.INPUT_DATAPARAMETER_GLOBALID, item.DataParameter.Id.GlobalId,
                    owner.Id.GlobalId);
                iwriter.Write(CalculatorMappingSaveCode.INPUT_CALCULATORPARAMETER_LOCALID, item.CalculatorParameter.Id.LocalId);
                iwriter.WriteGlobalId(CalculatorMappingSaveCode.INPUT_CALCULATORPARAMETER_GLOBALID, item.CalculatorParameter.Id.GlobalId,
                    owner.Id.GlobalId);
            });

            writer.WriteArray(CalculatorMappingSaveCode.OUTPUT_MAPPING, mapping.OutputMapping, (item, iwriter) =>
            {
                iwriter.Write(CalculatorMappingSaveCode.OUTPUT_DATAPARAMETER_LOCALID, item.DataParameter.Id.LocalId);
                iwriter.WriteGlobalId(CalculatorMappingSaveCode.OUTPUT_DATAPARAMETER_GLOBALID, item.DataParameter.Id.GlobalId,
                    owner.Id.GlobalId);
                iwriter.Write(CalculatorMappingSaveCode.OUTPUT_CALCULATORPARAMETER_LOCALID, item.CalculatorParameter.Id.LocalId);
                iwriter.WriteGlobalId(CalculatorMappingSaveCode.OUTPUT_CALCULATORPARAMETER_GLOBALID, item.CalculatorParameter.Id.GlobalId,
                    owner.Id.GlobalId);
            });
        }

        private static CalculatorMapping ParseMapping(DXFParserResultSet data, DXFParserInfo info)
        {
            var name = data.Get<string>(CalculatorMappingSaveCode.NAME, string.Empty);
            var calculatorId = SimId.Empty;

            if (info.FileVersion >= 12)
            {
                calculatorId = data.GetSimId(CalculatorMappingSaveCode.CALCULATOR_GLOBALID, CalculatorMappingSaveCode.CALCULATOR_LOCALID,
                    info.GlobalId);
            }
            else if (info.FileVersion >= 1 && info.FileVersion <= 11)
            {
                var id = SimObjectId.FromString(data.Get<string>(CalculatorMappingSaveCode.CALCULATOR_LOCALID, string.Empty));
                calculatorId = new SimId(id.global, id.local);
            }
            else if (info.FileVersion <= 0)
            {
                calculatorId = new SimId(info.GlobalId, data.Get<long>(CalculatorMappingSaveCode.CALCULATOR_LOCALID, 0L));
            }

            //Component Id translation
            calculatorId = info.TranslateId(typeof(SimComponent), calculatorId);

            var inputParameters = data.Get<(SimId, SimId)[]>(CalculatorMappingSaveCode.INPUT_MAPPING, new (SimId, SimId)[0]);
            var outputParameters = data.Get<(SimId, SimId)[]>(CalculatorMappingSaveCode.OUTPUT_MAPPING, new (SimId, SimId)[0]);

            //Parameter id translation
            for (int i = 0; i < inputParameters.Length; ++i)
            {
                inputParameters[i] = (info.TranslateId(typeof(SimParameter), inputParameters[i].Item1),
                    info.TranslateId(typeof(SimParameter), inputParameters[i].Item2));
            }
            for (int i = 0; i < outputParameters.Length; ++i)
            {
                outputParameters[i] = (info.TranslateId(typeof(SimParameter), outputParameters[i].Item1),
                    info.TranslateId(typeof(SimParameter), outputParameters[i].Item2));
            }

            return new CalculatorMapping(name, calculatorId, inputParameters, outputParameters);
        }

        private static (SimId dataParameter, SimId calculatorParameter) ParseCalculatorMappingInputParameterTuple(
            DXFParserResultSet data, DXFParserInfo info)
        {
            return ParseCalculatorMappingParameterTuple(data, info,
                CalculatorMappingSaveCode.INPUT_DATAPARAMETER_GLOBALID, CalculatorMappingSaveCode.INPUT_DATAPARAMETER_LOCALID,
                CalculatorMappingSaveCode.INPUT_CALCULATORPARAMETER_GLOBALID, CalculatorMappingSaveCode.INPUT_CALCULATORPARAMETER_LOCALID);
        }
        private static (SimId dataParameter, SimId calculatorParameter) ParseCalculatorMappingOutputParameterTuple(
            DXFParserResultSet data, DXFParserInfo info)
        {
            return ParseCalculatorMappingParameterTuple(data, info,
                CalculatorMappingSaveCode.OUTPUT_DATAPARAMETER_GLOBALID, CalculatorMappingSaveCode.OUTPUT_DATAPARAMETER_LOCALID,
                CalculatorMappingSaveCode.OUTPUT_CALCULATORPARAMETER_GLOBALID, CalculatorMappingSaveCode.OUTPUT_CALCULATORPARAMETER_LOCALID);
        }
        private static (SimId dataParameter, SimId calculatorParameter) ParseCalculatorMappingParameterTuple(
            DXFParserResultSet data, DXFParserInfo info,
            CalculatorMappingSaveCode dataGlobalIdCode, CalculatorMappingSaveCode dataLocalIdCode,
            CalculatorMappingSaveCode calculatorGlobalIdCode, CalculatorMappingSaveCode calculatorLocalIdCode)
        {
            var dataId = data.GetSimId(dataGlobalIdCode, dataLocalIdCode, info.GlobalId);
            var calculatorId = data.GetSimId(calculatorGlobalIdCode, calculatorLocalIdCode, info.GlobalId);

            return (dataId, calculatorId);   
        }

        #endregion

        #region Access Profile

        /// <summary>
        /// Writes a access profile entry to the DXF stream
        /// </summary>
        /// <param name="entry">The access profile entry to serialize</param>
        /// <param name="writer">The writer into which the data should be written</param>
        internal static void WriteProfileEntry(SimAccessProfileEntry entry, DXFStreamWriter writer)
        {
            writer.Write(ParamStructCommonSaveCode.ENTITY_START, ParamStructTypes.ACCESS_TRACKER);
            writer.Write(ParamStructCommonSaveCode.CLASS_NAME, typeof(SimAccessProfileEntry));
            writer.Write(ParamStructCommonSaveCode.ENTITY_KEY, entry.Role);
            writer.Write(ComponentAccessTrackerSaveCode.FLAGS, entry.Access);
            writer.Write(ComponentAccessTrackerSaveCode.WRITE_LAST, entry.LastAccessWrite);
            writer.Write(ComponentAccessTrackerSaveCode.SUPERVIZE_LAST, entry.LastAccessSupervize);
            writer.Write(ComponentAccessTrackerSaveCode.RELEASE_LAST, entry.LastAccessRelease);
        }

        private static SimAccessProfileEntry ParseProfileEntry(DXFParserResultSet data, DXFParserInfo info)
        {
            var role = data.Get<SimUserRole>(ParamStructCommonSaveCode.ENTITY_KEY, SimUserRole.GUEST);
            var access = data.Get<SimComponentAccessPrivilege>(ComponentAccessTrackerSaveCode.FLAGS, SimComponentAccessPrivilege.None);

            var lastWrite = data.Get<DateTime>(ComponentAccessTrackerSaveCode.WRITE_LAST, DateTime.MinValue);
            var lastSupervize = data.Get<DateTime>(ComponentAccessTrackerSaveCode.SUPERVIZE_LAST, DateTime.MinValue);
            var lastRelease = data.Get<DateTime>(ComponentAccessTrackerSaveCode.RELEASE_LAST, DateTime.MinValue);

            try
            {
                return new SimAccessProfileEntry(role, access, lastWrite, lastSupervize, lastRelease);
            }
            catch (Exception e)
            {
                info.Log(string.Format("Failed to load AccessProfileEntry with Role=\"{0}\"\nException: {2}\nStackTrace:\n{3}",
                    role, e.Message, e.StackTrace
                    ));
            }

            return null;
        }

        #endregion

        #region Excel Component Mapping

        /// <summary>
        /// Writes a excel mapping to the DXF stream
        /// </summary>
        /// <param name="mapping">The excel mapping to serialize</param>
        /// <param name="writer">The writer into which the data should be written</param>
        internal static void WriteExcelComponentMapping(ExcelComponentMapping mapping, DXFStreamWriter writer)
        {
            writer.Write(ParamStructCommonSaveCode.ENTITY_START, ParamStructTypes.EXCEL_MAPPING);
            writer.Write(ParamStructCommonSaveCode.CLASS_NAME, typeof(ExcelComponentMapping));

            writer.WriteArray(ExcelMappingSaveCode.MAP_PATH, mapping.Path, (item, iwriter) =>
            {
                iwriter.Write(ParamStructCommonSaveCode.X_VALUE, item);
                iwriter.Write(ParamStructCommonSaveCode.Y_VALUE, Guid.Empty); //Needs to be changed when global ids are supported
            });

            writer.Write(ExcelMappingSaveCode.MAP_TOOL_NAME, mapping.ToolName);
            writer.Write(ExcelMappingSaveCode.MAP_RULE_NAME, mapping.RuleName);
            writer.Write(ExcelMappingSaveCode.MAP_RULE_INDEX, mapping.RuleIndexInTool);
        }

        private static ExcelComponentMapping ParseExcelComponentMapping(DXFParserResultSet data, DXFParserInfo info)
        {
            var path = data.Get<SimId[]>(ExcelMappingSaveCode.MAP_PATH, new SimId[0]);
            var toolName = data.Get<string>(ExcelMappingSaveCode.MAP_TOOL_NAME, string.Empty);
            var ruleName = data.Get<string>(ExcelMappingSaveCode.MAP_RULE_NAME, string.Empty);
            var ruleIndex = data.Get<int>(ExcelMappingSaveCode.MAP_RULE_INDEX, -1);

            try
            {
                return new ExcelComponentMapping(path.Select(x => x.LocalId), toolName, ruleName, ruleIndex);
            }
            catch (Exception e)
            {
                info.Log(string.Format("Failed to load ExcelMapping with ToolName={0}, RuleName=\"{1}\"\nException: {2}\nStackTrace:\n{3}",
                    toolName, ruleName, e.Message, e.StackTrace
                    ));
            }

            return null;
        }
        private static SimId ParseExcelMappingPathItem(DXFParserResultSet data, DXFParserInfo info)
        {
            var id = data.GetSimId(ParamStructCommonSaveCode.Y_VALUE, ParamStructCommonSaveCode.X_VALUE, info.GlobalId);
            id = info.TranslateId(typeof(SimComponent), id);
            return id;
        }


        #endregion

        #region Chat

        /// <summary>
        /// Writes a chat item to the DXF stream
        /// </summary>
        /// <param name="chatItem">The chat item to serialize</param>
        /// <param name="writer">The writer into which the data should be written</param>
        internal static void WriteChatItem(SimChatItem chatItem, DXFStreamWriter writer)
        {
            writer.StartComplexEntity();

            writer.Write(ParamStructCommonSaveCode.ENTITY_START, ParamStructTypes.CHAT_ITEM);
            writer.Write(ParamStructCommonSaveCode.CLASS_NAME, typeof(SimChatItem));

            writer.Write(ChatItemSaveCode.TYPE, chatItem.Type);
            writer.Write(ChatItemSaveCode.AUTHOR, chatItem.Author);
            writer.Write(ChatItemSaveCode.VR_ADDRESS, chatItem.VotingRegistration_Address);
            writer.Write(ChatItemSaveCode.VR_PASSWORD, ChatUtils.SecureStringToString(chatItem.VotingRegistration_Password));
            writer.Write(ChatItemSaveCode.GIT_COMMIT, chatItem.GitCommitKey);
            writer.Write(ChatItemSaveCode.TIMESTAMP, chatItem.TimeStamp);
            writer.Write(ChatItemSaveCode.MESSAGE, chatItem.Message);
            writer.Write(ChatItemSaveCode.STATE, chatItem.State);
            writer.WriteArray(ChatItemSaveCode.EXPECTED_REACTIONS_FROM, chatItem.ExpectsReacionsFrom, (item, iwriter) =>
            {
                iwriter.Write(ParamStructCommonSaveCode.X_VALUE, item);
            });
            writer.WriteEntitySequence(ChatItemSaveCode.CHILDREN, chatItem.Children, WriteChatItem);

            writer.EndComplexEntity();
        }

        private static SimChatItem ParseChatItem(DXFParserResultSet data, DXFParserInfo info)
        {
            var type = data.Get<SimChatItemType>(ChatItemSaveCode.TYPE, SimChatItemType.QUESTION);
            var author = data.Get<SimUserRole>(ChatItemSaveCode.AUTHOR, SimUserRole.GUEST);
            var address = data.Get<string>(ChatItemSaveCode.VR_ADDRESS, string.Empty);
            var password = data.Get<string>(ChatItemSaveCode.VR_PASSWORD, string.Empty);
            var commit = data.Get<string>(ChatItemSaveCode.GIT_COMMIT, string.Empty);
            var timestamp = data.Get<DateTime>(ChatItemSaveCode.TIMESTAMP, DateTime.MinValue);
            var message = data.Get<string>(ChatItemSaveCode.MESSAGE, string.Empty);
            var state = data.Get<SimChatItemState>(ChatItemSaveCode.STATE, SimChatItemState.OPEN);
            var expectedRoles = data.Get<SimUserRole[]>(ChatItemSaveCode.EXPECTED_REACTIONS_FROM, new SimUserRole[0]);
            var children = data.Get<SimChatItem[]>(ChatItemSaveCode.CHILDREN, new SimChatItem[0]);

            try
            {
                return new SimChatItem(type, author, address, password, commit, timestamp, message, state, expectedRoles, children);
            }
            catch (Exception e)
            {
                info.Log(string.Format("Failed to load ChatItem with type={0}, message=\"{1}\"\nException: {2}\nStackTrace:\n{3}",
                    type, message, e.Message, e.StackTrace
                    ));
            }

            return null;
        }

        #endregion

        #region Color (V11)

        private static Color ParseColor(DXFParserResultSet data, DXFParserInfo info)
        {
            var a = data.Get<byte>(ParamStructCommonSaveCode.V5_VALUE, 255);
            var r = data.Get<byte>(ParamStructCommonSaveCode.V6_VALUE, 0);
            var g = data.Get<byte>(ParamStructCommonSaveCode.V7_VALUE, 0);
            var b = data.Get<byte>(ParamStructCommonSaveCode.V8_VALUE, 0);

            return Color.FromArgb(a, r, g, b);
        }

        #endregion
    }
}
