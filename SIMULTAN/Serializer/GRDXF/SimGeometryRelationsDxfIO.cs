using SIMULTAN.Data.Geometry;
using SIMULTAN.Data.Taxonomy;
using SIMULTAN.Serializer.DXF;
using SIMULTAN.Utils;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SIMULTAN.Serializer.GRDXF
{
    /// <summary>
    /// The IO class for saving and loading <see cref="SimGeometryRelation"/> GRDXF files.
    /// </summary>
    internal class SimGeometryRelationsDxfIO
    {
        #region Syntax 

        private static DXFEntityParserElement<SimGeometryRelation> geometryRelationEntitiy =
            new DXFEntityParserElement<SimGeometryRelation>(ParamStructTypes.GEOMETRY_RELATION, ParseGeometryRelation,
                new DXFEntryParserElement[]
                {
                    // SimId
                    new DXFSingleEntryParserElement<Guid>(ParamStructCommonSaveCode.ENTITY_GLOBAL_ID),
                    new DXFSingleEntryParserElement<long>(ParamStructCommonSaveCode.ENTITY_LOCAL_ID),
                    // Relation Type taxonomy entry
                    new DXFSingleEntryParserElement<Guid>(GeometryRelationSaveCode.GEOMETRY_RELATION_TYPE_GLOBAL_ID),
                    new DXFSingleEntryParserElement<long>(GeometryRelationSaveCode.GEOMETRY_RELATION_TYPE_LOCAL_ID),
                    // Source
                    new DXFSingleEntryParserElement<Guid>(GeometryRelationSaveCode.GEOMETRY_RELATION_SOURCE_PROJECT_ID),
                    new DXFSingleEntryParserElement<int>(GeometryRelationSaveCode.GEOMETRY_RELATION_SOURCE_FILE_ID),
                    new DXFSingleEntryParserElement<ulong>(GeometryRelationSaveCode.GEOMETRY_RELATION_SOURCE_GEOMETRY_ID),
                    // Target
                    new DXFSingleEntryParserElement<Guid>(GeometryRelationSaveCode.GEOMETRY_RELATION_TARGET_PROJECT_ID),
                    new DXFSingleEntryParserElement<int>(GeometryRelationSaveCode.GEOMETRY_RELATION_TARGET_FILE_ID),
                    new DXFSingleEntryParserElement<ulong>(GeometryRelationSaveCode.GEOMETRY_RELATION_TARGET_GEOMETRY_ID),
                    // IsAutogenerated
                    new DXFSingleEntryParserElement<bool>(GeometryRelationSaveCode.GEOMETRY_RELATION_IS_AUTOGENERATED),
                });


        private static DXFSectionParserElement<SimGeometryRelation> geometryRelationsSection =
            new DXFSectionParserElement<SimGeometryRelation>(ParamStructTypes.GEOMETRY_RELATION_SECTION, new DXFEntityParserElementBase<SimGeometryRelation>[]
            {
                geometryRelationEntitiy,
            });

        #endregion

        #region Reading

        /// <summary>
        /// Reads the provided GRDXF file and parses the contents and puts them into the <see cref="SimGeometryRelationCollection"/> of the project data.
        /// </summary>
        /// <param name="file">The file.</param>
        /// <param name="info">The info.</param>
        public static void Read(FileInfo file, DXFParserInfo info)
        {
            info.CurrentFile = file;
            using (var fs = file.OpenRead())
            {
                if (fs.Length == 0)
                    return;
                using (var reader = new DXFStreamReader(fs))
                {
                    Read(reader, info);
                }
            }
        }

        /// <summary>
        /// Reads the provided stream and parses the contents and puts them into the <see cref="SimGeometryRelationCollection"/> of the project data.
        /// </summary>
        /// <param name="reader">The reader.</param>
        /// <param name="info">The info.</param>
        public static void Read(DXFStreamReader reader, DXFParserInfo info)
        {
            if (CommonParserElements.VersionSectionElement.IsParsable(reader, info))
            {
                info = CommonParserElements.VersionSectionElement.Parse(reader, info).First();
            }

            var relations = geometryRelationsSection.Parse(reader, info);

            info.ProjectData.GeometryRelations.StartLoading();
            info.ProjectData.GeometryRelations.AddRange(relations);
            info.ProjectData.GeometryRelations.StopLoading();

            info.ProjectData.GeometryRelations.RestoreReferences();
        }

        private static SimGeometryRelation ParseGeometryRelation(DXFParserResultSet result, DXFParserInfo info)
        {
            var id = result.GetSimId(ParamStructCommonSaveCode.ENTITY_GLOBAL_ID, ParamStructCommonSaveCode.ENTITY_LOCAL_ID, info.GlobalId);
            var typeId = result.GetSimId(GeometryRelationSaveCode.GEOMETRY_RELATION_TYPE_GLOBAL_ID, GeometryRelationSaveCode.GEOMETRY_RELATION_TYPE_LOCAL_ID, info.GlobalId);
            // no reference saved if 0
            var typeRef = typeId.LocalId == 0 ? null : new SimTaxonomyEntryReference(typeId);

            var sourceProjectId = result.Get<Guid>(GeometryRelationSaveCode.GEOMETRY_RELATION_SOURCE_PROJECT_ID, Guid.Empty);
            var sourceFileId = result.Get<int>(GeometryRelationSaveCode.GEOMETRY_RELATION_SOURCE_FILE_ID, 0);
            var sourceGeometryId = result.Get<ulong>(GeometryRelationSaveCode.GEOMETRY_RELATION_SOURCE_GEOMETRY_ID, 0);

            var targetProjectId = result.Get<Guid>(GeometryRelationSaveCode.GEOMETRY_RELATION_TARGET_PROJECT_ID, Guid.Empty);

            var targetFileId = result.Get<int>(GeometryRelationSaveCode.GEOMETRY_RELATION_TARGET_FILE_ID, 0);
            var targetGeometryId = result.Get<ulong>(GeometryRelationSaveCode.GEOMETRY_RELATION_TARGET_GEOMETRY_ID, 0);

            var isAutogenerated = result.Get<bool>(GeometryRelationSaveCode.GEOMETRY_RELATION_IS_AUTOGENERATED, false);

            return new SimGeometryRelation(id, typeRef,
                new SimBaseGeometryReference(sourceProjectId, sourceFileId, sourceGeometryId),
                new SimBaseGeometryReference(targetProjectId, targetFileId, targetGeometryId),
                isAutogenerated);
        }

        #endregion

        #region Writing

        /// <summary>
        /// Writes the relations into the provided file in the GRDXF format.
        /// </summary>
        /// <param name="file">The file.</param>
        /// <param name="relations">The relations.</param>
        public static void Write(FileInfo file, IEnumerable<SimGeometryRelation> relations)
        {
            using (var fs = file.Open(FileMode.Create, FileAccess.Write))
            {
                using (var writer = new DXFStreamWriter(fs))
                {
                    Write(writer, relations);
                }
            }
        }

        /// <summary>
        /// Writes the relation into the provided writer.
        /// </summary>
        /// <param name="writer">The writer.</param>
        /// <param name="relations">The relations.</param>
        public static void Write(DXFStreamWriter writer, IEnumerable<SimGeometryRelation> relations)
        {
            writer.WriteVersionSection();

            writer.StartSection(ParamStructTypes.GEOMETRY_RELATION_SECTION);

            foreach (var relation in relations)
            {
                WriteGeometryRelation(writer, relation);
            }

            writer.EndSection();

            writer.WriteEOF();
        }

        private static void WriteGeometryRelation(DXFStreamWriter writer, SimGeometryRelation relation)
        {
            writer.Write(ParamStructCommonSaveCode.ENTITY_START, ParamStructTypes.GEOMETRY_RELATION);

            // SimId
            writer.WriteGlobalId(ParamStructCommonSaveCode.ENTITY_GLOBAL_ID, relation.Id.GlobalId, relation.Factory.CalledFromLocation.GlobalID);
            writer.Write(ParamStructCommonSaveCode.ENTITY_LOCAL_ID, relation.Id.LocalId);

            // Type taxonomy entry reference
            if (relation.RelationType != null && relation.RelationType.Target != null)
            {
                writer.WriteGlobalId(GeometryRelationSaveCode.GEOMETRY_RELATION_TYPE_GLOBAL_ID, relation.RelationType.Target.GlobalID, relation.Factory.CalledFromLocation.GlobalID);
                writer.Write(GeometryRelationSaveCode.GEOMETRY_RELATION_TYPE_LOCAL_ID, relation.RelationType.Target.LocalID);
            }

            writer.Write(GeometryRelationSaveCode.GEOMETRY_RELATION_SOURCE_PROJECT_ID, relation.Source.ProjectId);
            writer.Write(GeometryRelationSaveCode.GEOMETRY_RELATION_SOURCE_FILE_ID, relation.Source.FileId);
            writer.Write(GeometryRelationSaveCode.GEOMETRY_RELATION_SOURCE_GEOMETRY_ID, relation.Source.BaseGeometryId);

            writer.Write(GeometryRelationSaveCode.GEOMETRY_RELATION_TARGET_PROJECT_ID, relation.Target.ProjectId);
            writer.Write(GeometryRelationSaveCode.GEOMETRY_RELATION_TARGET_FILE_ID, relation.Target.FileId);
            writer.Write(GeometryRelationSaveCode.GEOMETRY_RELATION_TARGET_GEOMETRY_ID, relation.Target.BaseGeometryId);

            writer.Write(GeometryRelationSaveCode.GEOMETRY_RELATION_IS_AUTOGENERATED, relation.IsAutogenerated);
        }

        #endregion

    }
}
