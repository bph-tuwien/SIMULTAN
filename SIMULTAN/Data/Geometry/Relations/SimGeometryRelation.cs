using SIMULTAN.Data.Taxonomy;
using System;

namespace SIMULTAN.Data.Geometry
{

    /// <summary>
    /// Reference for a <see cref="SimGeometryRelation"/>
    /// </summary>
    public struct SimBaseGeometryReference
    {
        /// <summary>
        /// The global project id of the referenced base geometry.
        /// </summary>
        public Guid ProjectId { get; private set; }

        /// <summary>
        /// The file id of the referenced base geometry.
        /// </summary>
        public int FileId { get; private set; }

        /// <summary>
        /// the base geometry that is referenced.
        /// </summary>
        public ulong BaseGeometryId { get; private set; }

        /// <summary>
        /// Creates a new <see cref="SimBaseGeometryReference"/>
        /// </summary>
        /// <param name="projectId">The project id</param>
        /// <param name="fileId">The file id</param>
        /// <param name="baseGeometryId">The base geometry id</param>
        public SimBaseGeometryReference(Guid projectId, int fileId, ulong baseGeometryId)
        {
            this.ProjectId = projectId;
            this.FileId = fileId;
            this.BaseGeometryId = baseGeometryId;
        }

        /// <summary>
        /// Creates a new <see cref="SimBaseGeometryReference"/> form a base geometry.
        /// Extracts the file id and base geometry id form the provided <see cref="BaseGeometry"/>.
        /// The base geometry needs to be in a geometry model and inside of a project.
        /// </summary>
        /// <param name="projectId"></param>
        /// <param name="baseGeometry"></param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        public SimBaseGeometryReference(Guid projectId, BaseGeometry baseGeometry)
        {
            if (baseGeometry == null)
                throw new ArgumentNullException(nameof(baseGeometry));
            if (baseGeometry.ModelGeometry == null || baseGeometry.ModelGeometry.Model == null)
                throw new ArgumentException("BaseGeometry is not in a geometry model");

            this.ProjectId = projectId;
            this.FileId = baseGeometry.ModelGeometry.Model.File.Key;
            this.BaseGeometryId = baseGeometry.Id;
        }

        /// <inheritdoc/>
        public override bool Equals(object obj)
        {
            return obj is SimBaseGeometryReference reference &&
                   this.ProjectId.Equals(reference.ProjectId) &&
                   this.FileId == reference.FileId &&
                   this.BaseGeometryId == reference.BaseGeometryId;
        }

        /// <inheritdoc/>
        public override int GetHashCode()
        {
            int hashCode = 1503129206;
            hashCode = hashCode * -1521134295 + this.ProjectId.GetHashCode();
            hashCode = hashCode * -1521134295 + this.FileId.GetHashCode();
            hashCode = hashCode * -1521134295 + this.BaseGeometryId.GetHashCode();
            return hashCode;
        }
    }

    /// <summary>
    /// Represents a direction relation between two <see cref="BaseGeometry"/> with a <see cref="SimTaxonomyEntry"/>
    /// as a relation type.
    /// </summary>
    public class SimGeometryRelation : SimObjectNew<SimGeometryRelationCollection>
    {

        /// <summary>
        /// If the relation was automatically created
        /// </summary>
        public bool IsAutogenerated
        {
            get => isAutogenerated;
            set
            {
                if (isAutogenerated != value)
                {
                    NotifyWriteAccess();
                    isAutogenerated = value;
                    NotifyPropertyChanged();
                    Factory?.OnGeometryRelationChanged(this);
                    NotifyChanged();
                }
            }
        }
        private bool isAutogenerated;

        /// <summary>
        /// The type of relation
        /// </summary>
        public SimTaxonomyEntryReference RelationType
        {
            get => relationType;
            set
            {
                if (relationType != value)
                {
                    NotifyWriteAccess();

                    if (relationType != null)
                    {
                        relationType.RemoveDeleteAction();
                    }

                    relationType = value;

                    if (relationType != null)
                    {
                        relationType.SetDeleteAction(RelationTypeEntryDeleted);
                    }
                    NotifyPropertyChanged();
                    Factory?.OnGeometryRelationChanged(this);
                    NotifyChanged();
                }
            }
        }
        private SimTaxonomyEntryReference relationType;

        /// <summary>
        /// The source reference of the relation
        /// </summary>
        public SimBaseGeometryReference Source
        {
            get => source;
            set
            {
                NotifyWriteAccess();
                source = value;
                NotifyPropertyChanged();
                Factory?.OnGeometryRelationChanged(this);
                NotifyChanged();
            }
        }
        private SimBaseGeometryReference source;

        /// <summary>
        /// The target reference of the relation
        /// </summary>
        public SimBaseGeometryReference Target
        {
            get => target;
            set
            {
                NotifyWriteAccess();
                target = value;
                NotifyPropertyChanged();
                Factory?.OnGeometryRelationChanged(this);
                NotifyChanged();
            }
        }
        private SimBaseGeometryReference target;

        /// <summary>
        /// Creates a new <see cref="SimGeometryRelation"/>
        /// </summary>
        /// <param name="relationType">The relation type</param>
        /// <param name="sourceProjectId">The source project id</param>
        /// <param name="source">The source</param>
        /// <param name="targetProjectId">The target project id</param>
        /// <param name="target">The target</param>
        /// <param name="isAutogenerated">If it was automatically generated</param>
        public SimGeometryRelation(SimTaxonomyEntry relationType, Guid sourceProjectId, BaseGeometry source, Guid targetProjectId, BaseGeometry target, bool isAutogenerated = false)
            : this(new SimTaxonomyEntryReference(relationType), new SimBaseGeometryReference(sourceProjectId, source), new SimBaseGeometryReference(targetProjectId, target), isAutogenerated)
        { }

        /// <summary>
        /// Creates a new <see cref="SimGeometryRelation"/>
        /// </summary>
        /// <param name="relationType">The relation type</param>
        /// <param name="sourceProjectId">The source project id</param>
        /// <param name="sourceFileId">The source file id</param>
        /// <param name="sourceGeometryId">The source geometry id</param>
        /// <param name="targetProjectId">The target project id</param>
        /// <param name="targetFileId">The target file id</param>
        /// <param name="targetGeometryId">The target geometry id</param>
        /// <param name="isAutogenerated">If it was automatically generated</param>
        public SimGeometryRelation(SimTaxonomyEntry relationType,
            Guid sourceProjectId, int sourceFileId, ulong sourceGeometryId,
            Guid targetProjectId, int targetFileId, ulong targetGeometryId,
            bool isAutogenerated = false)
            : this(relationType == null ? null : new SimTaxonomyEntryReference(relationType),
                  new SimBaseGeometryReference(sourceProjectId, sourceFileId, sourceGeometryId),
                  new SimBaseGeometryReference(targetProjectId, targetFileId, targetGeometryId), isAutogenerated)
        {
        }

        /// <summary>
        /// Creates a new <see cref="SimGeometryRelation"/>
        /// </summary>
        /// <param name="relationType">The relation type</param>
        /// <param name="source">The source reference</param>
        /// <param name="target">The target reference</param>
        /// <param name="isAutogenerated">If it was automatically generated</param>
        public SimGeometryRelation(SimTaxonomyEntryReference relationType, SimBaseGeometryReference source, SimBaseGeometryReference target, bool isAutogenerated = false)
            : this(SimId.Empty, relationType, source, target, isAutogenerated)
        {
        }

        /// <summary>
        /// Creates a new <see cref="SimGeometryRelation"/>
        /// Only used in loading from file.
        /// </summary>
        /// <param name="id">The id of the relation</param>
        /// <param name="relationType">The relation type</param>
        /// <param name="source">The source reference</param>
        /// <param name="target">The target reference</param>
        /// <param name="isAutogenerated">If it was automatically generated</param>
        public SimGeometryRelation(SimId id, SimTaxonomyEntryReference relationType, SimBaseGeometryReference source, SimBaseGeometryReference target, bool isAutogenerated = false)
            : base(id)
        {
            this.RelationType = relationType;
            this.Source = source;
            this.Target = target;
            this.isAutogenerated = isAutogenerated;
        }

        private void RelationTypeEntryDeleted(SimTaxonomyEntry source)
        {
            RelationType = null;
        }
    }
}
