using Microsoft.VisualStudio.TestTools.UnitTesting;
using SIMULTAN.Data.Components;
using SIMULTAN.Excel;
using SIMULTAN.Tests.Utils;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace SIMULTAN.Tests.Excel
{
    [TestClass]
    public class MapablePropertiesTests : BaseProjectTest
    {
        private static readonly FileInfo mappingProject = new FileInfo(@".\ExcelMappingFilterTests.simultan");
        private static readonly FileInfo emptyProject = new FileInfo(@".\EmptyProject.simultan");

        #region Component Properties

        [TestMethod]
        public void ComponentNameTest()
        {
            LoadProject(emptyProject);
            projectData.Components.EnableAsyncUpdates = false;
            var comp = new SimComponent();
            projectData.Components.Add(comp);
            comp.Name = "MyComponent";

            var result = ExcelMappingNode.GetPropertyValues(comp, new Dictionary<string, Type> { { "Name", typeof(string) } });
            Assert.AreEqual(1, result.Count);
            Assert.AreEqual("MyComponent", result[0] as string);
        }

        [TestMethod]
        public void ComponentCategoryTest()
        {
            LoadProject(emptyProject);
            projectData.Components.EnableAsyncUpdates = false;
            var comp = new SimComponent();
            projectData.Components.Add(comp);
            comp.Parameters.Add(new SimParameter("param", "unit", 1.0)
            {
                Category = SimCategory.Air
            });
            comp.Parameters.Add(new SimParameter("param", "unit", 1.0)
            {
                Category = SimCategory.Costs
            });

            var result = ExcelMappingNode.GetPropertyValues(comp, new Dictionary<string, Type> { { "Category", typeof(SimCategory) } });
            Assert.AreEqual(1, result.Count);
            Assert.AreEqual(SimCategory.Air | SimCategory.Costs | SimCategory.Communication, (SimCategory)result[0]);
        }

        [TestMethod]
        public void ComponentDescriptionTest()
        {
            LoadProject(emptyProject);
            projectData.Components.EnableAsyncUpdates = false;
            var comp = new SimComponent();
            projectData.Components.Add(comp);
            comp.Description = "MyDesc";

            var result = ExcelMappingNode.GetPropertyValues(comp, new Dictionary<string, Type> { { "Description", typeof(string) } });
            Assert.AreEqual(1, result.Count);
            Assert.AreEqual("MyDesc", result[0] as string);
        }

        [TestMethod]
        public void ComponentInstanceStateTest()
        {
            LoadProject(mappingProject);

            var node = projectData.Components.First(x => x.Name == "Node");

            var result = ExcelMappingNode.GetPropertyValues(node, new Dictionary<string, Type> { { "InstanceState", typeof(SimInstanceState) } });
            Assert.AreEqual(1, result.Count);
            Assert.AreEqual(new SimInstanceState(false, SimInstanceConnectionState.Ok), (SimInstanceState)result[0]);
        }

        [TestMethod]
        public void ComponentIsAutoGeneratedTest()
        {
            LoadProject(emptyProject);
            projectData.Components.EnableAsyncUpdates = false;
            var comp = new SimComponent();
            projectData.Components.Add(comp);
            comp.IsAutomaticallyGenerated = true;

            var result = ExcelMappingNode.GetPropertyValues(comp, new Dictionary<string, Type> { { "IsAutomaticallyGenerated", typeof(bool) } });
            Assert.AreEqual(1, result.Count);
            Assert.AreEqual(true, (bool)result[0]);
        }

        [TestMethod]
        public void ComponentIsBoundInNetworkTest()
        {
            LoadProject(mappingProject);

            var node = projectData.Components.First(x => x.Name == "Node");

            var result = ExcelMappingNode.GetPropertyValues(node, new Dictionary<string, Type> { { "IsBoundInNetwork", typeof(bool) } });
            Assert.AreEqual(1, result.Count);
            Assert.AreEqual(true, (bool)result[0]);
        }

        [TestMethod]
        public void ComponentLocalIdTest()
        {
            LoadProject(emptyProject);
            projectData.Components.EnableAsyncUpdates = false;
            var comp = new SimComponent();
            projectData.Components.Add(comp);

            var result = ExcelMappingNode.GetPropertyValues(comp, new Dictionary<string, Type> { { "LocalID", typeof(long) } });
            Assert.AreEqual(1, result.Count);
            Assert.AreNotEqual((long)-1, (long)result[0]);
        }

        [TestMethod]
        public void ComponentSlotTest()
        {
            LoadProject(emptyProject);
            projectData.Components.EnableAsyncUpdates = false;
            var comp = new SimComponent();
            projectData.Components.Add(comp);

            var subcomp = new SimComponent();
            subcomp.CurrentSlot = new SimSlotBase(ComponentUtils.COMP_SLOT_COST);
            var slot = new SimSlot(ComponentUtils.COMP_SLOT_COST, "2");
            comp.Components.Add(new SimChildComponentEntry(slot, subcomp));

            var result = ExcelMappingNode.GetPropertyValues(subcomp, new Dictionary<string, Type> { { "CurrentSlot", typeof(string) } });
            Assert.AreEqual(1, result.Count);
            Assert.AreEqual(slot.ToSerializerString(), result[0] as string);
        }

        #endregion

        #region Parameter Properties

        [TestMethod]
        public void ParameterCategoryTest()
        {
            LoadProject(emptyProject);
            projectData.Components.EnableAsyncUpdates = false;
            var comp = new SimComponent();
            projectData.Components.Add(comp);

            var param = new SimParameter("Test", "m", 42);
            comp.Parameters.Add(param);
            param.Category = SimCategory.Acoustics;

            var result = ExcelMappingNode.GetPropertyValues(param, new Dictionary<string, Type> { { "Category", typeof(SimCategory) } });
            Assert.AreEqual(1, result.Count);
            Assert.AreEqual(SimCategory.Acoustics, (SimCategory)result[0]);
        }

        [TestMethod]
        public void ParameterDescriptionTest()
        {
            LoadProject(emptyProject);
            projectData.Components.EnableAsyncUpdates = false;
            var comp = new SimComponent();
            projectData.Components.Add(comp);

            var param = new SimParameter("Test", "m", 42);
            comp.Parameters.Add(param);
            param.Description = "CustomDesc";

            var result = ExcelMappingNode.GetPropertyValues(param, new Dictionary<string, Type> { { "Description", typeof(string) } });
            Assert.AreEqual(1, result.Count);
            Assert.AreEqual("CustomDesc", (string)result[0]);
        }

        [TestMethod]
        public void ParameterLocalId()
        {
            LoadProject(emptyProject);
            projectData.Components.EnableAsyncUpdates = false;
            var comp = new SimComponent();
            projectData.Components.Add(comp);

            var param = new SimParameter("Test", "m", 42);
            comp.Parameters.Add(param);

            var result = ExcelMappingNode.GetPropertyValues(param, new Dictionary<string, Type> { { "LocalID", typeof(long) } });
            Assert.AreEqual(1, result.Count);
            Assert.AreNotEqual((long)-1, (long)result[0]);
        }

        [TestMethod]
        public void ParameterValueMinTest()
        {
            LoadProject(emptyProject);
            projectData.Components.EnableAsyncUpdates = false;
            var comp = new SimComponent();
            projectData.Components.Add(comp);

            var param = new SimParameter("Test", "m", 42);
            comp.Parameters.Add(param);
            param.ValueMin = -99.9;

            var result = ExcelMappingNode.GetPropertyValues(param, new Dictionary<string, Type> { { "ValueMin", typeof(double) } });
            Assert.AreEqual(1, result.Count);
            Assert.AreEqual(-99.9, (double)result[0]);
        }

        [TestMethod]
        public void ParameterValueMaxTest()
        {
            LoadProject(emptyProject);
            projectData.Components.EnableAsyncUpdates = false;
            var comp = new SimComponent();
            projectData.Components.Add(comp);

            var param = new SimParameter("Test", "m", 42);
            comp.Parameters.Add(param);
            param.ValueMax = 99.9;

            var result = ExcelMappingNode.GetPropertyValues(param, new Dictionary<string, Type> { { "ValueMax", typeof(double) } });
            Assert.AreEqual(1, result.Count);
            Assert.AreEqual(99.9, (double)result[0]);
        }

        [TestMethod]
        public void ParameterNameTest()
        {
            LoadProject(emptyProject);
            projectData.Components.EnableAsyncUpdates = false;
            var comp = new SimComponent();
            projectData.Components.Add(comp);

            var param = new SimParameter("Test", "m", 42);
            comp.Parameters.Add(param);

            var result = ExcelMappingNode.GetPropertyValues(param, new Dictionary<string, Type> { { "Name", typeof(string) } });
            Assert.AreEqual(1, result.Count);
            Assert.AreEqual("Test", (string)result[0]);
        }

        [TestMethod]
        public void ParameterPropagationTest()
        {
            LoadProject(emptyProject);
            projectData.Components.EnableAsyncUpdates = false;
            var comp = new SimComponent();
            projectData.Components.Add(comp);

            var param = new SimParameter("Test", "m", 42);
            param.Propagation = SimInfoFlow.FromExternal;
            comp.Parameters.Add(param);

            var result = ExcelMappingNode.GetPropertyValues(param, new Dictionary<string, Type> { { "Propagation", typeof(SimInfoFlow) } });
            Assert.AreEqual(1, result.Count);
            Assert.AreEqual(SimInfoFlow.FromExternal, (SimInfoFlow)result[0]);
        }

        [TestMethod]
        public void ParameteTextValueTest()
        {
            LoadProject(emptyProject);
            projectData.Components.EnableAsyncUpdates = false;
            var comp = new SimComponent();
            projectData.Components.Add(comp);

            var param = new SimParameter("Test", "m", 42);
            param.TextValue = "sometext";
            comp.Parameters.Add(param);

            var result = ExcelMappingNode.GetPropertyValues(param, new Dictionary<string, Type> { { "TextValue", typeof(string) } });
            Assert.AreEqual(1, result.Count);
            Assert.AreEqual("sometext", (string)result[0]);
        }

        [TestMethod]
        public void ParameteUnitTest()
        {
            LoadProject(emptyProject);
            projectData.Components.EnableAsyncUpdates = false;
            var comp = new SimComponent();
            projectData.Components.Add(comp);

            var param = new SimParameter("Test", "m", 42);
            comp.Parameters.Add(param);

            var result = ExcelMappingNode.GetPropertyValues(param, new Dictionary<string, Type> { { "Unit", typeof(string) } });
            Assert.AreEqual(1, result.Count);
            Assert.AreEqual("m", (string)result[0]);
        }

        [TestMethod]
        public void ParameterValueCurrentTest()
        {
            LoadProject(emptyProject);
            projectData.Components.EnableAsyncUpdates = false;
            var comp = new SimComponent();
            projectData.Components.Add(comp);

            var param = new SimParameter("Test", "m", 42);
            comp.Parameters.Add(param);

            var result = ExcelMappingNode.GetPropertyValues(param, new Dictionary<string, Type> { { "ValueCurrent", typeof(double) } });
            Assert.AreEqual(1, result.Count);
            Assert.AreEqual(42.0, (double)result[0]);
        }

        #endregion

        #region Instance Properties

        [TestMethod]
        public void InstanceNameFilter()
        {
            LoadProject(mappingProject);

            var node = projectData.Components.First(x => x.Name == "Node");
            var instance = node.Instances.First();

            var result = ExcelMappingNode.GetPropertyValues(instance, new Dictionary<string, Type> { { "Name", typeof(string) } });
            Assert.AreEqual(1, result.Count);
            Assert.AreEqual("Geometry", (string)result[0]);
        }

        [TestMethod]
        public void InstanceParameterValuesTemporaryFilter()
        {
            LoadProject(mappingProject);

            var node = projectData.Components.First(x => x.Name == "Node");
            var instance = node.Instances.First();

            var result = ExcelMappingNode.GetPropertyValues(instance, new Dictionary<string, Type> { { "InstanceParameterValuesTemporary", typeof(SimInstanceParameterCollection) } });
            Assert.AreEqual(1, result.Count);
            Assert.AreEqual(1, ((SimInstanceParameterCollection)result[0]).Count);
        }

        [TestMethod]
        public void InstanceParameterValuesPersistentFilter()
        {
            LoadProject(mappingProject);

            var node = projectData.Components.First(x => x.Name == "Node");
            var instance = node.Instances.First();

            var result = ExcelMappingNode.GetPropertyValues(instance,
                new Dictionary<string, Type> { { "InstanceParameterValuesPersistent", typeof(SimInstanceParameterCollection) } });
            Assert.AreEqual(1, result.Count);
            Assert.AreEqual(1, ((SimInstanceParameterCollection)result[0]).Count);
        }

        #endregion
    }
}
