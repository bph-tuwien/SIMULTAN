using Microsoft.VisualStudio.TestTools.UnitTesting;
using SIMULTAN.Data;
using SIMULTAN.Data.Components;
using SIMULTAN.Data.FlowNetworks;
using SIMULTAN.Data.SimMath;
using SIMULTAN.Data.Taxonomy;
using SIMULTAN.Data.Users;
using SIMULTAN.Projects;
using SIMULTAN.Serializer.CODXF;
using SIMULTAN.Serializer.DXF;
using SIMULTAN.Tests.Properties;
using SIMULTAN.Tests.TestUtils;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;



namespace SIMULTAN.Tests.IO
{
    [TestClass]
    public class ComponentDXFComponentTests : ComponentDXFTestsBase
    {
        [TestMethod]
        public void WriteComponent()
        {
            SimComponent component = new SimComponent()
            {
                Id = new Data.SimId(Guid.Empty, 123),
                Name = "Root Component",
                Description = "Some" + Environment.NewLine + "descriptive" + Environment.NewLine + "text",
                IsAutomaticallyGenerated = true,
                ComponentColor = SimColor.FromArgb(230, 240, 10, 20),
                InstanceType = SimInstanceType.AttributesFace,
                Visibility = SimComponentVisibility.VisibleInProject,
                SortingType = SimComponentContentSorting.BySlot,
            };
            component.Slots.Add(new SimTaxonomyEntryReference(TaxonomyUtils.GetDefaultSlot(SimDefaultSlotKeys.Cost)));

            string exportedString = null;
            using (MemoryStream stream = new MemoryStream())
            {
                using (DXFStreamWriter writer = new DXFStreamWriter(stream, true))
                {
                    ComponentDxfIOComponents.WriteComponent(component, writer, SimSlot.Invalid);
                }

                stream.Flush();
                stream.Position = 0;

                var array = stream.ToArray();
                exportedString = Encoding.UTF8.GetString(array);
            }

            AssertUtil.AreEqualMultiline(Resources.DXFSerializer_WriteComponent, exportedString);
        }

        [TestMethod]
        public void WriteMultiple()
        {
            ExtendedProjectData data = CreateTestData();

            string exportedString = null;
            using (MemoryStream stream = new MemoryStream())
            {
                using (DXFStreamWriter writer = new DXFStreamWriter(stream, true))
                {
                    ComponentDxfIOComponents.WriteComponentSection(data.Components, writer);
                }

                stream.Flush();
                stream.Position = 0;

                var array = stream.ToArray();
                exportedString = Encoding.UTF8.GetString(array);
            }

            AssertUtil.AreEqualMultiline(Properties.Resources.DXFSerializer_CODXF_Multiple, exportedString);
        }

        [TestMethod]
        public void WriteEmpty()
        {
            ExtendedProjectData data = new ExtendedProjectData();

            string exportedString = null;
            using (MemoryStream stream = new MemoryStream())
            {
                using (DXFStreamWriter writer = new DXFStreamWriter(stream, true))
                {
                    ComponentDxfIOComponents.WriteComponentSection(data.Components, writer);
                }

                stream.Flush();
                stream.Position = 0;

                var array = stream.ToArray();
                exportedString = Encoding.UTF8.GetString(array);
            }

            AssertUtil.AreEqualMultiline(Properties.Resources.DXFSerializer_CODXF_Empty, exportedString);
        }


        [TestMethod]
        public void ParseEmptyV12()
        {
            ExtendedProjectData projectData = new ExtendedProjectData();
            Guid guid = Guid.NewGuid();

            using (DXFStreamReader reader = new DXFStreamReader(StringStream.Create(Resources.DXFSerializer_CODXF_Empty)))
            {
                ComponentDxfIOComponents.ReadComponentSection(reader, new DXFParserInfo(guid, projectData));
            }

            Assert.AreEqual(0, projectData.Components.Count);
        }

        private static void CheckComponent(SimComponent component, SimTaxonomyEntryReference currentSlot,
            string name, string description,
            long localId, bool isAutoGenerated, SimColor color)
        {
            Assert.IsNotNull(component);
            Assert.AreEqual(currentSlot.Target, component.Slots[0].Target);
            Assert.AreEqual(name, component.Name);
            Assert.AreEqual(description, component.Description);
            Assert.AreEqual(localId, component.Id.LocalId);
            Assert.AreEqual(isAutoGenerated, component.IsAutomaticallyGenerated);
            Assert.AreEqual(color, component.ComponentColor);
        }


        private static void CheckComponent(SimChildComponentEntry component, SimSlot slot,
            string name, string description,
            long localId, bool isAutoGenerated, SimColor color)
        {
            Assert.AreEqual(slot, component.Slot);
            CheckComponent(component.Component, slot.SlotBase, name, description,
                localId, isAutoGenerated, color);
        }

        internal static void CheckComponents(int parameterCount, ProjectData projectData, Guid guid, Guid otherguid, SimFlowNetworkNode node)
        {
            var jointTax = projectData.Taxonomies.GetDefaultSlot(SimDefaultSlotKeys.Joint);
            var costTax = projectData.Taxonomies.GetDefaultSlot(SimDefaultSlotKeys.Cost);
            var undefinedTax = projectData.Taxonomies.GetDefaultSlot(SimDefaultSlotKeys.Undefined);

            Assert.AreEqual(1, projectData.Components.Count);
            var root = projectData.Components.First();
            CheckComponent(root, new SimTaxonomyEntryReference(jointTax), "Root Component", "Some" + Environment.NewLine + "descriptive" + Environment.NewLine + "text",
                123, true, SimColor.FromArgb(230, 240, 10, 20));
            Assert.AreEqual(0, root.Parameters.Count);

            Assert.AreEqual(3, root.Components.Count);
            //Child components
            var child1 = root.Components[0];
            var child2 = root.Components[1];
            CheckComponent(child1, new SimSlot(costTax, "0"), "Child Component 1",
                "Some" + Environment.NewLine + "descriptive" + Environment.NewLine + "text2", 131, false, SimColor.FromArgb(230, 100, 10, 20));

            Assert.AreEqual(parameterCount, child1.Component.Parameters.Count);
            CheckComponent(child2, new SimSlot(undefinedTax, "1"), "Child Component 2",
                "Some" + Environment.NewLine + "descriptive" + Environment.NewLine + "text3", 141, true, SimColor.FromArgb(230, 240, 10, 32));
            Assert.AreEqual(parameterCount, child2.Component.Parameters.Count);


            //Placeholder
            Assert.AreEqual(null, root.Components[2].Component);
            Assert.AreEqual(new SimSlot(costTax, "1"), root.Components[2].Slot);

            //References
            Assert.AreEqual(4, child1.Component.ReferencedComponents.Count);
            var refs = root.Components[0].Component.ReferencedComponents;
            Assert.AreEqual(new SimSlot(jointTax, "0"), refs[0].Slot);
            Assert.AreEqual(SimId.Empty, refs[0].TargetId);

            Assert.AreEqual(new SimSlot(jointTax, "1"), refs[1].Slot);
            Assert.AreEqual(new SimId(guid, 141), refs[1].TargetId);
            Assert.AreEqual(root.Components[1].Component, refs[1].Target);

            Assert.AreEqual(new SimSlot(jointTax, "2"), refs[2].Slot);
            Assert.AreEqual(new SimId(otherguid, 8877), refs[2].TargetId);
            Assert.AreEqual(null, refs[2].Target);

            Assert.AreEqual(new SimSlot(jointTax, "3"), refs[3].Slot);
            Assert.AreEqual(new SimId(guid, 4456), refs[3].TargetId);
            Assert.AreEqual(null, refs[3].Target);

            //Parameter
            Assert.AreEqual(20011, child1.Component.Parameters.First(x => x.NameTaxonomyEntry.Text == "A1").Id.LocalId);

            //Calculations
            Assert.AreEqual(0, root.Calculations.Count);
            Assert.AreEqual(0, child1.Component.Calculations.Count);
            Assert.AreEqual(1, child2.Component.Calculations.Count);

            var calc = child2.Component.Calculations[0];
            Assert.AreEqual(30001, calc.Id.LocalId);
            Assert.AreEqual("x*x", calc.Expression);
            Assert.AreEqual(1, calc.InputParams.Count);
            Assert.AreEqual(child2.Component.Parameters.First(x => x.NameTaxonomyEntry.Text == "A"), calc.InputParams["x"]);
            Assert.AreEqual(1, calc.ReturnParams.Count);
            Assert.AreEqual(child2.Component.Parameters.First(x => x.NameTaxonomyEntry.Text == "B"), calc.ReturnParams["ret"]);

            //Instances
            Assert.AreEqual(SimInstanceType.NetworkEdge, root.InstanceType);
            Assert.AreEqual(SimInstanceType.AttributesFace, child1.Component.InstanceType);
            Assert.AreEqual(SimInstanceType.NetworkNode, child2.Component.InstanceType);

            Assert.AreEqual(0, root.Instances.Count);
            Assert.AreEqual(0, child1.Component.Instances.Count);
            Assert.AreEqual(2, child2.Component.Instances.Count);

            var inst1 = child2.Component.Instances[0];
            Assert.AreEqual(1, inst1.Placements.Count);
            Assert.AreEqual(parameterCount, inst1.InstanceParameterValuesPersistent.Count);
            Assert.IsTrue(inst1.Placements[0] is SimInstancePlacementNetwork);
            Assert.AreEqual(node, ((SimInstancePlacementNetwork)inst1.Placements[0]).NetworkElement);

            var inst2 = child2.Component.Instances[1];
            Assert.AreEqual(1, inst2.Placements.Count);
            Assert.AreEqual(parameterCount, inst2.InstanceParameterValuesPersistent.Count);
            Assert.IsTrue(inst2.Placements[0] is SimInstancePlacementGeometry);

            //Mappings
            Assert.AreEqual(1, child1.Component.CalculatorMappings.Count);
            var mapping = child1.Component.CalculatorMappings_Internal[0];
            Assert.AreEqual(child2.Component, mapping.Calculator);
            Assert.AreEqual(1, mapping.InputMapping.Count);
            Assert.AreEqual(child1.Component.Parameters[0], mapping.InputMapping[0].DataParameter);
            Assert.AreEqual(child2.Component.Parameters[0], mapping.InputMapping[0].CalculatorParameter);

            Assert.AreEqual(1, mapping.OutputMapping.Count);
            Assert.AreEqual(child1.Component.Parameters[1], mapping.OutputMapping[0].DataParameter);
            Assert.AreEqual(child2.Component.Parameters[1], mapping.OutputMapping[0].CalculatorParameter);

            //Access Profile
            Assert.AreEqual(SimComponentValidity.Valid, root.AccessLocal.ProfileState);
            Assert.AreEqual(SimComponentValidity.WriteAfterSupervize, child1.Component.AccessLocal.ProfileState);
            Assert.AreEqual(SimComponentValidity.WriteAfterRelease, child2.Component.AccessLocal.ProfileState);

            Assert.AreEqual(SimComponentAccessPrivilege.All, root.AccessLocal[SimUserRole.ARCHITECTURE].Access);
            Assert.AreEqual(SimComponentAccessPrivilege.All, child1.Component.AccessLocal[SimUserRole.ARCHITECTURE].Access);
            Assert.AreEqual(SimComponentAccessPrivilege.All, child2.Component.AccessLocal[SimUserRole.ARCHITECTURE].Access);

            Assert.AreEqual(new DateTime(2022, 05, 07, 0, 0, 0, DateTimeKind.Utc),
                child2.Component.AccessLocal[SimUserRole.ARCHITECTURE].LastAccessWrite);

            //Chat
            Assert.AreEqual(1, root.Conversation.TopItems.Count);
            Assert.AreEqual(2, root.Conversation.TopItems.First().Value.Children.Count);

            //Visibility
            Assert.AreEqual(SimComponentVisibility.AlwaysVisible, root.Visibility);
            Assert.AreEqual(SimComponentVisibility.VisibleInProject, child1.Component.Visibility);
            Assert.AreEqual(SimComponentVisibility.VisibleInProject, child2.Component.Visibility);

            //Sorting
            Assert.AreEqual(SimComponentContentSorting.BySlot, root.SortingType);
            Assert.AreEqual(SimComponentContentSorting.ByName, child1.Component.SortingType);
            Assert.AreEqual(SimComponentContentSorting.ByName, child2.Component.SortingType);
        }


        [TestMethod]
        public void ParseMultipleV25()
        {
            Guid guid = Guid.NewGuid();
            Guid otherguid = new Guid("98478ed1-d3f4-4873-95b6-412e5e23aac5");

            ExtendedProjectData projectData = new ExtendedProjectData();
            projectData.SetCallingLocation(new DummyReferenceLocation(guid));

            SimFlowNetworkNode node = new SimFlowNetworkNode(guid, 2, "", "", true, new SimPoint(3.5, 3.6), null);

            var tax = new SimTaxonomy("BaseTax");
            var baseTaxonomyEntry = new SimTaxonomyEntry("BaseEnumTaxEntry", "BaseTaxEntry");
            tax.Entries.Add(baseTaxonomyEntry);
            projectData.Taxonomies.Add(tax);

            TaxonomyUtils.LoadDefaultTaxonomies(projectData);
            using (DXFStreamReader reader = new DXFStreamReader(StringStream.Create(Resources.DXFSerializer_ReadCODXF_MultipleV25)))
            {
                var info = new DXFParserInfo(guid, projectData);
                info.FileVersion = 25;
                ComponentDxfIOComponents.ReadComponentSection(reader, info);
            }

            projectData.Components.RestoreDefaultTaxonomyReferences();
            projectData.Components.RestoreReferences(new Dictionary<SimObjectId, SimFlowNetworkElement>
            {
                { node.ID, node }
            });

            CheckComponents(9, projectData, guid, otherguid, node);
        }

        [TestMethod]
        public void ParseMultipleV21()
        {
            Guid guid = Guid.NewGuid();
            Guid otherguid = new Guid("98478ed1-d3f4-4873-95b6-412e5e23aac5");

            ExtendedProjectData projectData = new ExtendedProjectData();
            projectData.SetCallingLocation(new DummyReferenceLocation(guid));

            SimFlowNetworkNode node = new SimFlowNetworkNode(guid, 2, "", "", true, new SimPoint(3.5, 3.6), null);

            var tax = new SimTaxonomy("BaseTax");
            var baseTaxonomyEntry = new SimTaxonomyEntry("BaseEnumTaxEntry", "BaseTaxEntry");
            tax.Entries.Add(baseTaxonomyEntry);
            projectData.Taxonomies.Add(tax);

            TaxonomyUtils.LoadDefaultTaxonomies(projectData);
            using (DXFStreamReader reader = new DXFStreamReader(StringStream.Create(Resources.DXFSerializer_ReadCODXF_MultipleV21)))
            {
                var info = new DXFParserInfo(guid, projectData);
                info.FileVersion = 21;
                ComponentDxfIOComponents.ReadComponentSection(reader, info);
            }

            projectData.Components.RestoreDefaultTaxonomyReferences();
            projectData.Components.RestoreReferences(new Dictionary<SimObjectId, SimFlowNetworkElement>
            {
                { node.ID, node }
            });

            CheckComponents(9, projectData, guid, otherguid, node);
        }

        [TestMethod]
        public void ParseMultipleV19()
        {
            Guid guid = Guid.NewGuid();
            Guid otherguid = new Guid("98478ed1-d3f4-4873-95b6-412e5e23aac5");

            ExtendedProjectData projectData = new ExtendedProjectData();
            projectData.SetCallingLocation(new DummyReferenceLocation(guid));

            SimFlowNetworkNode node = new SimFlowNetworkNode(guid, 2, "", "", true, new SimPoint(3.5, 3.6), null);

            var tax = new SimTaxonomy("BaseTax");
            var baseTaxonomyEntry = new SimTaxonomyEntry("BaseEnumTaxEntry", "BaseTaxEntry");
            tax.Entries.Add(baseTaxonomyEntry);
            projectData.Taxonomies.Add(tax);

            TaxonomyUtils.LoadDefaultTaxonomies(projectData);
            using (DXFStreamReader reader = new DXFStreamReader(StringStream.Create(Resources.DXFSerializer_ReadCODXF_MultipleV19)))
            {
                var info = new DXFParserInfo(guid, projectData);
                info.FileVersion = 19;
                ComponentDxfIOComponents.ReadComponentSection(reader, info);
            }

            projectData.Components.RestoreDefaultTaxonomyReferences();
            projectData.Components.RestoreReferences(new Dictionary<SimObjectId, SimFlowNetworkElement>
            {
                { node.ID, node }
            });

            CheckComponents(9, projectData, guid, otherguid, node);
        }

        [TestMethod]
        public void ParseMultipleV12()
        {
            Guid guid = Guid.NewGuid();
            Guid otherguid = new Guid("98478ed1-d3f4-4873-95b6-412e5e23aac5");

            ExtendedProjectData projectData = new ExtendedProjectData();
            projectData.SetCallingLocation(new DummyReferenceLocation(guid));

            SimFlowNetworkNode node = new SimFlowNetworkNode(guid, 123, "", "", true, new SimPoint(3.5, 3.6), null);

            using (DXFStreamReader reader = new DXFStreamReader(StringStream.Create(Resources.DXFSerializer_ReadCODXF_MultipleV12)))
            {
                var info = new DXFParserInfo(guid, projectData);
                info.FileVersion = 12;
                ComponentDxfIOComponents.ReadComponentSection(reader, info);
            }

            projectData.Components.RestoreReferences(new Dictionary<SimObjectId, SimFlowNetworkElement>
            {
                { node.ID, node }
            });
            TaxonomyUtils.LoadDefaultTaxonomies(projectData);
            projectData.Components.RestoreDefaultTaxonomyReferences();

            CheckComponents(2, projectData, guid, otherguid, node);
        }

        [TestMethod]
        public void ParseMultipleV11()
        {
            Guid guid = new Guid("98478ed1-d3f4-4873-95b6-412e5e23aac4");
            Guid otherguid = new Guid("da7d8f7c-8eec-423b-b127-9d6e17f52522");

            ExtendedProjectData projectData = new ExtendedProjectData();
            projectData.SetCallingLocation(new DummyReferenceLocation(guid));

            SimFlowNetworkNode node = new SimFlowNetworkNode(guid, 123, "", "", true, new SimPoint(3.5, 3.6), null);

            using (DXFStreamReader reader = new DXFStreamReader(StringStream.Create(Resources.DXFSerializer_ReadCODXF_MultipleV11)))
            {
                var info = new DXFParserInfo(guid, projectData);
                info.FileVersion = 11;
                ComponentDxfIOComponents.ReadComponentSection(reader, info);
            }

            projectData.Components.RestoreReferences(new Dictionary<SimObjectId, SimFlowNetworkElement>
            {
                { node.ID, node }
            });
            TaxonomyUtils.LoadDefaultTaxonomies(projectData);
            projectData.Components.RestoreDefaultTaxonomyReferences();

            CheckComponents(2, projectData, guid, otherguid, node);
        }

        [TestMethod]
        public void ParseMultipleV10()
        {
            Guid guid = new Guid("98478ed1-d3f4-4873-95b6-412e5e23aac4");
            Guid otherguid = new Guid("98478ed1-d3f4-4873-95b6-412e5e23aac5");

            ExtendedProjectData projectData = new ExtendedProjectData();
            projectData.SetCallingLocation(new DummyReferenceLocation(guid));

            SimFlowNetworkNode node = new SimFlowNetworkNode(guid, 123, "", "", true, new SimPoint(3.5, 3.6), null);

            using (DXFStreamReader reader = new DXFStreamReader(StringStream.Create(Resources.DXFSerializer_ReadCODXF_MultipleV10)))
            {
                var info = new DXFParserInfo(guid, projectData);
                info.FileVersion = 10;
                ComponentDxfIOComponents.ReadComponentSection(reader, info);
            }

            projectData.Components.RestoreReferences(new Dictionary<SimObjectId, SimFlowNetworkElement>
            {
                { node.ID, node }
            });

            TaxonomyUtils.LoadDefaultTaxonomies(projectData);
            var undefinedTax = projectData.Taxonomies.GetDefaultSlot(SimDefaultSlotKeys.Undefined);
            var costTax = projectData.Taxonomies.GetDefaultSlot(SimDefaultSlotKeys.Cost);
            var jointTax = projectData.Taxonomies.GetDefaultSlot(SimDefaultSlotKeys.Joint);
            projectData.Components.RestoreDefaultTaxonomyReferences();

            Assert.AreEqual(1, projectData.Components.Count);
            var root = projectData.Components.First();
            CheckComponent(root, new SimTaxonomyEntryReference(jointTax), "Root Component", "Some" + Environment.NewLine + "descriptive" + Environment.NewLine + "text",
                123, true, SimColor.FromArgb(230, 240, 10, 20));
            Assert.AreEqual(0, root.Parameters.Count);

            Assert.AreEqual(3, root.Components.Count);
            //Child components
            var child1 = root.Components[0];
            var child2 = root.Components[1];
            CheckComponent(child1, new SimSlot(new SimTaxonomyEntryReference(costTax), "0"), "Child Component 1",
                "Some" + Environment.NewLine + "descriptive" + Environment.NewLine + "text2", 131, false, SimColor.FromArgb(230, 100, 10, 20));
            Assert.AreEqual(2, child1.Component.Parameters.Count);
            CheckComponent(child2, new SimSlot(new SimTaxonomyEntryReference(undefinedTax), "1"), "Child Component 2",
                "Some" + Environment.NewLine + "descriptive" + Environment.NewLine + "text3", 141, true, SimColor.FromArgb(230, 240, 10, 32));
            Assert.AreEqual(2, child2.Component.Parameters.Count);


            //Placeholder
            Assert.AreEqual(null, root.Components[2].Component);
            Assert.AreEqual(new SimSlot(new SimTaxonomyEntryReference(costTax), "1"), root.Components[2].Slot);

            //References
            Assert.AreEqual(4, child1.Component.ReferencedComponents.Count);
            var refs = root.Components[0].Component.ReferencedComponents;
            Assert.AreEqual(new SimSlot(jointTax, "0"), refs[0].Slot);
            Assert.AreEqual(SimId.Empty, refs[0].TargetId);

            Assert.AreEqual(new SimSlot(jointTax, "1"), refs[1].Slot);
            Assert.AreEqual(new SimId(guid, 141), refs[1].TargetId);
            Assert.AreEqual(root.Components[1].Component, refs[1].Target);

            Assert.AreEqual(new SimSlot(jointTax, "2"), refs[2].Slot);
            Assert.AreEqual(new SimId(otherguid, 8877), refs[2].TargetId);
            Assert.AreEqual(null, refs[2].Target);

            Assert.AreEqual(new SimSlot(jointTax, "3"), refs[3].Slot);
            Assert.AreEqual(new SimId(guid, 4456), refs[3].TargetId);
            Assert.AreEqual(null, refs[3].Target);

            //Parameter
            Assert.AreEqual(20011, child1.Component.Parameters.First(x => x.NameTaxonomyEntry.Text == "A1").Id.LocalId);

            //Calculations
            Assert.AreEqual(0, root.Calculations.Count);
            Assert.AreEqual(0, child1.Component.Calculations.Count);
            Assert.AreEqual(1, child2.Component.Calculations.Count);

            var calc = child2.Component.Calculations[0];
            Assert.AreEqual(30001, calc.Id.LocalId);
            Assert.AreEqual("x*x", calc.Expression);
            Assert.AreEqual(1, calc.InputParams.Count);
            Assert.AreEqual(child2.Component.Parameters.First(x => x.NameTaxonomyEntry.Text == "A"), calc.InputParams["x"]);
            Assert.AreEqual(1, calc.ReturnParams.Count);
            Assert.AreEqual(child2.Component.Parameters.First(x => x.NameTaxonomyEntry.Text == "B"), calc.ReturnParams["ret"]);

            //Instances
            Assert.AreEqual(SimInstanceType.NetworkEdge, root.InstanceType);
            Assert.AreEqual(SimInstanceType.AttributesFace, child1.Component.InstanceType);
            Assert.AreEqual(SimInstanceType.NetworkNode, child2.Component.InstanceType);

            Assert.AreEqual(0, root.Instances.Count);
            Assert.AreEqual(0, child1.Component.Instances.Count);
            Assert.AreEqual(2, child2.Component.Instances.Count);

            var inst1 = child2.Component.Instances[0];
            Assert.AreEqual(false, inst1.PropagateParameterChanges);
            Assert.AreEqual(1, inst1.Placements.Count);
            Assert.AreEqual(2, inst1.InstanceParameterValuesPersistent.Count);
            Assert.IsTrue(inst1.Placements[0] is SimInstancePlacementNetwork);
            Assert.AreEqual(node, ((SimInstancePlacementNetwork)inst1.Placements[0]).NetworkElement);

            var inst2 = child2.Component.Instances[1];
            Assert.AreEqual(false, inst2.PropagateParameterChanges);
            Assert.AreEqual(1, inst2.Placements.Count);
            Assert.AreEqual(2, inst2.InstanceParameterValuesPersistent.Count);
            Assert.IsTrue(inst2.Placements[0] is SimInstancePlacementGeometry);

            //Mappings
            Assert.AreEqual(1, child1.Component.CalculatorMappings.Count);
            var mapping = child1.Component.CalculatorMappings_Internal[0];
            Assert.AreEqual(child2.Component, mapping.Calculator);
            Assert.AreEqual(1, mapping.InputMapping.Count);
            Assert.AreEqual(child1.Component.Parameters[0], mapping.InputMapping[0].DataParameter);
            Assert.AreEqual(child2.Component.Parameters[0], mapping.InputMapping[0].CalculatorParameter);

            Assert.AreEqual(1, mapping.OutputMapping.Count);
            Assert.AreEqual(child1.Component.Parameters[1], mapping.OutputMapping[0].DataParameter);
            Assert.AreEqual(child2.Component.Parameters[1], mapping.OutputMapping[0].CalculatorParameter);

            //Access Profile
            Assert.AreEqual(SimComponentValidity.Valid, root.AccessLocal.ProfileState);
            Assert.AreEqual(SimComponentValidity.WriteAfterSupervize, child1.Component.AccessLocal.ProfileState);
            Assert.AreEqual(SimComponentValidity.WriteAfterRelease, child2.Component.AccessLocal.ProfileState);

            Assert.AreEqual(SimComponentAccessPrivilege.All, root.AccessLocal[SimUserRole.ARCHITECTURE].Access);
            Assert.AreEqual(SimComponentAccessPrivilege.All, child1.Component.AccessLocal[SimUserRole.ARCHITECTURE].Access);
            Assert.AreEqual(SimComponentAccessPrivilege.All, child2.Component.AccessLocal[SimUserRole.ARCHITECTURE].Access);

            Assert.AreEqual(new DateTime(2022, 05, 07, 0, 0, 0, DateTimeKind.Utc),
                child2.Component.AccessLocal[SimUserRole.ARCHITECTURE].LastAccessWrite);

            //Chat
            Assert.AreEqual(1, root.Conversation.TopItems.Count);
            Assert.AreEqual(2, root.Conversation.TopItems.First().Value.Children.Count);

            //Visibility
            Assert.AreEqual(SimComponentVisibility.AlwaysVisible, root.Visibility);
            Assert.AreEqual(SimComponentVisibility.VisibleInProject, child1.Component.Visibility);
            Assert.AreEqual(SimComponentVisibility.VisibleInProject, child2.Component.Visibility);

            //Sorting
            Assert.AreEqual(SimComponentContentSorting.BySlot, root.SortingType);
            Assert.AreEqual(SimComponentContentSorting.ByName, child1.Component.SortingType);
            Assert.AreEqual(SimComponentContentSorting.ByName, child2.Component.SortingType);
        }

        [TestMethod]
        public void ParseMultipleV9()
        {
            Guid guid = new Guid("98478ed1-d3f4-4873-95b6-412e5e23aac4");
            Guid otherguid = new Guid("98478ed1-d3f4-4873-95b6-412e5e23aac5");

            ExtendedProjectData projectData = new ExtendedProjectData();
            projectData.SetCallingLocation(new DummyReferenceLocation(guid));

            SimFlowNetworkNode node = new SimFlowNetworkNode(guid, 123, "", "", true, new SimPoint(3.5, 3.6), null);

            using (DXFStreamReader reader = new DXFStreamReader(StringStream.Create(Resources.DXFSerializer_ReadCODXF_MultipleV9)))
            {
                var info = new DXFParserInfo(guid, projectData);
                info.FileVersion = 9;
                ComponentDxfIOComponents.ReadComponentSection(reader, info);
            }

            projectData.Components.RestoreReferences(new Dictionary<SimObjectId, SimFlowNetworkElement>
            {
                { node.ID, node }
            });
            TaxonomyUtils.LoadDefaultTaxonomies(projectData);
            var undefinedTax = projectData.Taxonomies.GetDefaultSlot(SimDefaultSlotKeys.Undefined);
            var costTax = projectData.Taxonomies.GetDefaultSlot(SimDefaultSlotKeys.Cost);
            var jointTax = projectData.Taxonomies.GetDefaultSlot(SimDefaultSlotKeys.Joint);
            projectData.Components.RestoreDefaultTaxonomyReferences();

            Assert.AreEqual(1, projectData.Components.Count);
            var root = projectData.Components.First();
            CheckComponent(root, new SimTaxonomyEntryReference(jointTax), "Root Component", "Some" + Environment.NewLine + "descriptive" + Environment.NewLine + "text",
                123, true, SimColor.FromArgb(230, 240, 10, 20));
            Assert.AreEqual(0, root.Parameters.Count);

            Assert.AreEqual(3, root.Components.Count);
            //Child components
            var child1 = root.Components[0];
            var child2 = root.Components[1];
            CheckComponent(child1, new SimSlot(new SimTaxonomyEntryReference(costTax), "0"), "Child Component 1",
                "Some" + Environment.NewLine + "descriptive" + Environment.NewLine + "text2", 131, false, SimColor.FromArgb(230, 100, 10, 20));
            Assert.AreEqual(2, child1.Component.Parameters.Count);
            CheckComponent(child2, new SimSlot(new SimTaxonomyEntryReference(undefinedTax), "1"), "Child Component 2",
                "Some" + Environment.NewLine + "descriptive" + Environment.NewLine + "text3", 141, true, SimColor.FromArgb(230, 240, 10, 32));
            Assert.AreEqual(2, child2.Component.Parameters.Count);


            //Placeholder
            Assert.AreEqual(null, root.Components[2].Component);
            Assert.AreEqual(new SimSlot(new SimTaxonomyEntryReference(costTax), "1"), root.Components[2].Slot);

            //References
            Assert.AreEqual(4, child1.Component.ReferencedComponents.Count);
            var refs = root.Components[0].Component.ReferencedComponents;
            Assert.AreEqual(new SimSlot(jointTax, "0"), refs[0].Slot);
            Assert.AreEqual(SimId.Empty, refs[0].TargetId);

            Assert.AreEqual(new SimSlot(jointTax, "1"), refs[1].Slot);
            Assert.AreEqual(new SimId(guid, 141), refs[1].TargetId);
            Assert.AreEqual(root.Components[1].Component, refs[1].Target);

            Assert.AreEqual(new SimSlot(jointTax, "2"), refs[2].Slot);
            Assert.AreEqual(new SimId(otherguid, 8877), refs[2].TargetId);
            Assert.AreEqual(null, refs[2].Target);

            Assert.AreEqual(new SimSlot(jointTax, "3"), refs[3].Slot);
            Assert.AreEqual(new SimId(guid, 4456), refs[3].TargetId);
            Assert.AreEqual(null, refs[3].Target);

            //Parameter
            Assert.AreEqual(20011, child1.Component.Parameters.First(x => x.NameTaxonomyEntry.Text == "A1").Id.LocalId);

            //Calculations
            Assert.AreEqual(0, root.Calculations.Count);
            Assert.AreEqual(0, child1.Component.Calculations.Count);
            Assert.AreEqual(1, child2.Component.Calculations.Count);

            var calc = child2.Component.Calculations[0];
            Assert.AreEqual(30001, calc.Id.LocalId);
            Assert.AreEqual("x*x", calc.Expression);
            Assert.AreEqual(1, calc.InputParams.Count);
            Assert.AreEqual(child2.Component.Parameters.First(x => x.NameTaxonomyEntry.Text == "A"), calc.InputParams["x"]);
            Assert.AreEqual(1, calc.ReturnParams.Count);
            Assert.AreEqual(child2.Component.Parameters.First(x => x.NameTaxonomyEntry.Text == "B"), calc.ReturnParams["ret"]);

            //Instances
            Assert.AreEqual(SimInstanceType.NetworkEdge, root.InstanceType);
            Assert.AreEqual(SimInstanceType.AttributesFace, child1.Component.InstanceType);
            Assert.AreEqual(SimInstanceType.NetworkNode, child2.Component.InstanceType);

            Assert.AreEqual(0, root.Instances.Count);
            Assert.AreEqual(1, child1.Component.Instances.Count);
            Assert.AreEqual(2, child2.Component.Instances.Count);

            var inst0 = child1.Component.Instances[0];
            Assert.AreEqual(true, inst0.PropagateParameterChanges);

            var inst1 = child2.Component.Instances[0];
            Assert.AreEqual(false, inst1.PropagateParameterChanges);
            Assert.AreEqual(1, inst1.Placements.Count);
            Assert.AreEqual(2, inst1.InstanceParameterValuesPersistent.Count);
            Assert.IsTrue(inst1.Placements[0] is SimInstancePlacementNetwork);
            Assert.AreEqual(node, ((SimInstancePlacementNetwork)inst1.Placements[0]).NetworkElement);

            var inst2 = child2.Component.Instances[1];
            Assert.AreEqual(false, inst2.PropagateParameterChanges);
            Assert.AreEqual(1, inst2.Placements.Count);
            Assert.AreEqual(2, inst2.InstanceParameterValuesPersistent.Count);
            Assert.IsTrue(inst2.Placements[0] is SimInstancePlacementGeometry);

            //Mappings
            Assert.AreEqual(1, child1.Component.CalculatorMappings.Count);
            var mapping = child1.Component.CalculatorMappings_Internal[0];
            Assert.AreEqual(child2.Component, mapping.Calculator);
            Assert.AreEqual(1, mapping.InputMapping.Count);
            Assert.AreEqual(child1.Component.Parameters[0], mapping.InputMapping[0].DataParameter);
            Assert.AreEqual(child2.Component.Parameters[0], mapping.InputMapping[0].CalculatorParameter);

            Assert.AreEqual(1, mapping.OutputMapping.Count);
            Assert.AreEqual(child1.Component.Parameters[1], mapping.OutputMapping[0].DataParameter);
            Assert.AreEqual(child2.Component.Parameters[1], mapping.OutputMapping[0].CalculatorParameter);

            //Access Profile
            Assert.AreEqual(SimComponentValidity.Valid, root.AccessLocal.ProfileState);
            Assert.AreEqual(SimComponentValidity.WriteAfterSupervize, child1.Component.AccessLocal.ProfileState);
            Assert.AreEqual(SimComponentValidity.WriteAfterRelease, child2.Component.AccessLocal.ProfileState);

            Assert.AreEqual(SimComponentAccessPrivilege.All, root.AccessLocal[SimUserRole.ARCHITECTURE].Access);
            Assert.AreEqual(SimComponentAccessPrivilege.All, child1.Component.AccessLocal[SimUserRole.ARCHITECTURE].Access);
            Assert.AreEqual(SimComponentAccessPrivilege.All, child2.Component.AccessLocal[SimUserRole.ARCHITECTURE].Access);

            Assert.AreEqual(new DateTime(2022, 05, 07, 0, 0, 0, DateTimeKind.Utc),
                child2.Component.AccessLocal[SimUserRole.ARCHITECTURE].LastAccessWrite);

            //Chat
            Assert.AreEqual(1, root.Conversation.TopItems.Count);
            Assert.AreEqual(2, root.Conversation.TopItems.First().Value.Children.Count);

            //Visibility
            Assert.AreEqual(SimComponentVisibility.AlwaysVisible, root.Visibility);
            Assert.AreEqual(SimComponentVisibility.VisibleInProject, child1.Component.Visibility);
            Assert.AreEqual(SimComponentVisibility.VisibleInProject, child2.Component.Visibility);

            //Sorting
            Assert.AreEqual(SimComponentContentSorting.BySlot, root.SortingType);
            Assert.AreEqual(SimComponentContentSorting.ByName, child1.Component.SortingType);
            Assert.AreEqual(SimComponentContentSorting.ByName, child2.Component.SortingType);
        }

        [TestMethod]
        public void ParseMultipleV8()
        {
            Guid guid = new Guid("98478ed1-d3f4-4873-95b6-412e5e23aac4");
            Guid otherguid = new Guid("98478ed1-d3f4-4873-95b6-412e5e23aac5");

            ExtendedProjectData projectData = new ExtendedProjectData();
            projectData.SetCallingLocation(new DummyReferenceLocation(guid));

            SimFlowNetworkNode node = new SimFlowNetworkNode(guid, 123, "", "", true, new SimPoint(3.5, 3.6), null);

            using (DXFStreamReader reader = new DXFStreamReader(StringStream.Create(Resources.DXFSerializer_ReadCODXF_MultipleV8)))
            {
                var info = new DXFParserInfo(guid, projectData);
                info.FileVersion = 8;
                ComponentDxfIOComponents.ReadComponentSection(reader, info);
            }

            projectData.Components.RestoreReferences(new Dictionary<SimObjectId, SimFlowNetworkElement>
            {
                { node.ID, node }
            });
            TaxonomyUtils.LoadDefaultTaxonomies(projectData);
            var undefinedTax = projectData.Taxonomies.GetDefaultSlot(SimDefaultSlotKeys.Undefined);
            var costTax = projectData.Taxonomies.GetDefaultSlot(SimDefaultSlotKeys.Cost);
            var jointTax = projectData.Taxonomies.GetDefaultSlot(SimDefaultSlotKeys.Joint);
            projectData.Components.RestoreDefaultTaxonomyReferences();

            Assert.AreEqual(1, projectData.Components.Count);
            var root = projectData.Components.First();
            CheckComponent(root, new SimTaxonomyEntryReference(jointTax), "Root Component", "Some" + Environment.NewLine + "descriptive" + Environment.NewLine + "text",
                4, true, SimColor.FromArgb(230, 240, 10, 20));
            Assert.AreEqual(0, root.Parameters.Count);

            Assert.AreEqual(3, root.Components.Count);
            //Child components
            var child1 = root.Components[0];
            var child2 = root.Components[1];
            CheckComponent(child1, new SimSlot(new SimTaxonomyEntryReference(costTax), "0"), "Child Component 1",
                "Some" + Environment.NewLine + "descriptive" + Environment.NewLine + "text2", 3, false, SimColor.FromArgb(230, 100, 10, 20));
            Assert.AreEqual(2, child1.Component.Parameters.Count);
            CheckComponent(child2, new SimSlot(new SimTaxonomyEntryReference(undefinedTax), "1"), "Child Component 2",
                "Some" + Environment.NewLine + "descriptive" + Environment.NewLine + "text3", 1, true, SimColor.FromArgb(230, 240, 10, 32));
            Assert.AreEqual(2, child2.Component.Parameters.Count);


            //Placeholder
            Assert.AreEqual(null, root.Components[2].Component);
            Assert.AreEqual(new SimSlot(new SimTaxonomyEntryReference(costTax), "1"), root.Components[2].Slot);

            //References
            Assert.AreEqual(3, child1.Component.ReferencedComponents.Count);
            var refs = root.Components[0].Component.ReferencedComponents;
            Assert.AreEqual(new SimSlot(jointTax, "0"), refs[0].Slot);
            Assert.AreEqual(SimId.Empty, refs[0].TargetId);

            Assert.AreEqual(new SimSlot(jointTax, "1"), refs[1].Slot);
            Assert.AreEqual(new SimId(guid, 1), refs[1].TargetId);
            Assert.AreEqual(child2.Component, refs[1].Target);

            Assert.AreEqual(new SimSlot(jointTax, "3"), refs[2].Slot);
            Assert.AreEqual(new SimId(guid, 2), refs[2].TargetId);
            Assert.AreEqual(null, refs[2].Target);

            //Parameter
            Assert.AreEqual(20011, child1.Component.Parameters.First(x => x.NameTaxonomyEntry.Text == "A1").Id.LocalId);

            //Calculations
            Assert.AreEqual(0, root.Calculations.Count);
            Assert.AreEqual(0, child1.Component.Calculations.Count);
            Assert.AreEqual(1, child2.Component.Calculations.Count);

            var calc = child2.Component.Calculations[0];
            Assert.AreEqual(30001, calc.Id.LocalId);
            Assert.AreEqual("x*x", calc.Expression);
            Assert.AreEqual(1, calc.InputParams.Count);
            Assert.AreEqual(child2.Component.Parameters.First(x => x.NameTaxonomyEntry.Text == "A"), calc.InputParams["x"]);
            Assert.AreEqual(1, calc.ReturnParams.Count);
            Assert.AreEqual(child2.Component.Parameters.First(x => x.NameTaxonomyEntry.Text == "B"), calc.ReturnParams["ret"]);

            //Instances
            Assert.AreEqual(SimInstanceType.NetworkEdge, root.InstanceType);
            Assert.AreEqual(SimInstanceType.AttributesFace, child1.Component.InstanceType);
            Assert.AreEqual(SimInstanceType.NetworkNode, child2.Component.InstanceType);

            Assert.AreEqual(0, root.Instances.Count);
            Assert.AreEqual(1, child1.Component.Instances.Count);
            Assert.AreEqual(2, child2.Component.Instances.Count);

            var inst0 = child1.Component.Instances[0];
            Assert.AreEqual(true, inst0.PropagateParameterChanges);

            var inst1 = child2.Component.Instances[0];
            Assert.AreEqual(false, inst1.PropagateParameterChanges);
            Assert.AreEqual(1, inst1.Placements.Count);
            Assert.AreEqual(2, inst1.InstanceParameterValuesPersistent.Count);
            Assert.IsTrue(inst1.Placements[0] is SimInstancePlacementNetwork);
            Assert.AreEqual(node, ((SimInstancePlacementNetwork)inst1.Placements[0]).NetworkElement);

            var inst2 = child2.Component.Instances[1];
            Assert.AreEqual(false, inst2.PropagateParameterChanges);
            Assert.AreEqual(1, inst2.Placements.Count);
            Assert.AreEqual(2, inst2.InstanceParameterValuesPersistent.Count);
            Assert.IsTrue(inst2.Placements[0] is SimInstancePlacementGeometry);

            //Mappings
            Assert.AreEqual(1, child1.Component.CalculatorMappings.Count);
            var mapping = child1.Component.CalculatorMappings_Internal[0];
            Assert.AreEqual(child2.Component, mapping.Calculator);
            Assert.AreEqual(1, mapping.InputMapping.Count);
            Assert.AreEqual(child1.Component.Parameters[0], mapping.InputMapping[0].DataParameter);
            Assert.AreEqual(child2.Component.Parameters[0], mapping.InputMapping[0].CalculatorParameter);

            Assert.AreEqual(1, mapping.OutputMapping.Count);
            Assert.AreEqual(child1.Component.Parameters[1], mapping.OutputMapping[0].DataParameter);
            Assert.AreEqual(child2.Component.Parameters[1], mapping.OutputMapping[0].CalculatorParameter);

            //Access Profile
            Assert.AreEqual(SimComponentValidity.Valid, root.AccessLocal.ProfileState);
            Assert.AreEqual(SimComponentValidity.WriteAfterSupervize, child1.Component.AccessLocal.ProfileState);
            Assert.AreEqual(SimComponentValidity.WriteAfterRelease, child2.Component.AccessLocal.ProfileState);

            Assert.AreEqual(SimComponentAccessPrivilege.All, root.AccessLocal[SimUserRole.ARCHITECTURE].Access);
            Assert.AreEqual(SimComponentAccessPrivilege.All, child1.Component.AccessLocal[SimUserRole.ARCHITECTURE].Access);
            Assert.AreEqual(SimComponentAccessPrivilege.All, child2.Component.AccessLocal[SimUserRole.ARCHITECTURE].Access);

            Assert.AreEqual(new DateTime(2022, 05, 07, 0, 0, 0, DateTimeKind.Utc),
                child2.Component.AccessLocal[SimUserRole.ARCHITECTURE].LastAccessWrite);

            //Chat
            Assert.AreEqual(1, root.Conversation.TopItems.Count);
            Assert.AreEqual(2, root.Conversation.TopItems.First().Value.Children.Count);

            //Visibility
            Assert.AreEqual(SimComponentVisibility.AlwaysVisible, root.Visibility);
            Assert.AreEqual(SimComponentVisibility.VisibleInProject, child1.Component.Visibility);
            Assert.AreEqual(SimComponentVisibility.VisibleInProject, child2.Component.Visibility);

            //Sorting
            Assert.AreEqual(SimComponentContentSorting.BySlot, root.SortingType);
            Assert.AreEqual(SimComponentContentSorting.ByName, child1.Component.SortingType);
            Assert.AreEqual(SimComponentContentSorting.ByName, child2.Component.SortingType);
        }

        [TestMethod]
        public void ParseMultipleV7()
        {
            Guid guid = new Guid("98478ed1-d3f4-4873-95b6-412e5e23aac4");
            Guid otherguid = new Guid("98478ed1-d3f4-4873-95b6-412e5e23aac5");

            ExtendedProjectData projectData = new ExtendedProjectData();
            projectData.SetCallingLocation(new DummyReferenceLocation(guid));

            SimFlowNetworkNode node = new SimFlowNetworkNode(guid, 123, "", "", true, new SimPoint(3.5, 3.6), null);

            using (DXFStreamReader reader = new DXFStreamReader(StringStream.Create(Resources.DXFSerializer_ReadCODXF_MultipleV7)))
            {
                var info = new DXFParserInfo(guid, projectData);
                info.FileVersion = 7;
                ComponentDxfIOComponents.ReadComponentSection(reader, info);
            }

            projectData.Components.RestoreReferences(new Dictionary<SimObjectId, SimFlowNetworkElement>
            {
                { node.ID, node }
            });
            TaxonomyUtils.LoadDefaultTaxonomies(projectData);
            var undefinedTax = projectData.Taxonomies.GetDefaultSlot(SimDefaultSlotKeys.Undefined);
            var costTax = projectData.Taxonomies.GetDefaultSlot(SimDefaultSlotKeys.Cost);
            var jointTax = projectData.Taxonomies.GetDefaultSlot(SimDefaultSlotKeys.Joint);
            projectData.Components.RestoreDefaultTaxonomyReferences();

            Assert.AreEqual(1, projectData.Components.Count);
            var root = projectData.Components.First();
            CheckComponent(root, new SimTaxonomyEntryReference(jointTax), "Root Component", "Some" + Environment.NewLine + "descriptive" + Environment.NewLine + "text",
                4, true, SimColor.FromArgb(230, 240, 10, 20));
            Assert.AreEqual(0, root.Parameters.Count);

            Assert.AreEqual(3, root.Components.Count);
            //Child components
            var child1 = root.Components[0];
            var child2 = root.Components[1];
            CheckComponent(child1, new SimSlot(new SimTaxonomyEntryReference(costTax), "0"), "Child Component 1",
                "Some" + Environment.NewLine + "descriptive" + Environment.NewLine + "text2", 3, false, SimColor.FromArgb(230, 100, 10, 20));
            Assert.AreEqual(2, child1.Component.Parameters.Count);
            CheckComponent(child2, new SimSlot(new SimTaxonomyEntryReference(undefinedTax), "1"), "Child Component 2",
                "Some" + Environment.NewLine + "descriptive" + Environment.NewLine + "text3", 1, true, SimColor.FromArgb(230, 240, 10, 32));
            Assert.AreEqual(2, child2.Component.Parameters.Count);


            //Placeholder
            Assert.AreEqual(null, root.Components[2].Component);
            Assert.AreEqual(new SimSlot(new SimTaxonomyEntryReference(costTax), "1"), root.Components[2].Slot);

            //References
            Assert.AreEqual(3, child1.Component.ReferencedComponents.Count);
            var refs = root.Components[0].Component.ReferencedComponents;
            Assert.AreEqual(new SimSlot(jointTax, "0"), refs[0].Slot);
            Assert.AreEqual(SimId.Empty, refs[0].TargetId);

            Assert.AreEqual(new SimSlot(jointTax, "1"), refs[1].Slot);
            Assert.AreEqual(new SimId(guid, 1), refs[1].TargetId);
            Assert.AreEqual(child2.Component, refs[1].Target);

            Assert.AreEqual(new SimSlot(jointTax, "3"), refs[2].Slot);
            Assert.AreEqual(new SimId(guid, 2), refs[2].TargetId);
            Assert.AreEqual(null, refs[2].Target);

            //Parameter
            Assert.AreEqual(20011, child1.Component.Parameters.First(x => x.NameTaxonomyEntry.Text == "A1").Id.LocalId);

            //Calculations
            Assert.AreEqual(0, root.Calculations.Count);
            Assert.AreEqual(0, child1.Component.Calculations.Count);
            Assert.AreEqual(1, child2.Component.Calculations.Count);

            var calc = child2.Component.Calculations[0];
            Assert.AreEqual(30001, calc.Id.LocalId);
            Assert.AreEqual("x*x", calc.Expression);
            Assert.AreEqual(1, calc.InputParams.Count);
            Assert.AreEqual(child2.Component.Parameters.First(x => x.NameTaxonomyEntry.Text == "A"), calc.InputParams["x"]);
            Assert.AreEqual(1, calc.ReturnParams.Count);
            Assert.AreEqual(child2.Component.Parameters.First(x => x.NameTaxonomyEntry.Text == "B"), calc.ReturnParams["ret"]);

            //Instances
            Assert.AreEqual(SimInstanceType.NetworkEdge, root.InstanceType);
            Assert.AreEqual(SimInstanceType.AttributesFace, child1.Component.InstanceType);
            Assert.AreEqual(SimInstanceType.NetworkNode, child2.Component.InstanceType);

            Assert.AreEqual(0, root.Instances.Count);
            Assert.AreEqual(1, child1.Component.Instances.Count);
            Assert.AreEqual(2, child2.Component.Instances.Count);

            var inst0 = child1.Component.Instances[0];
            Assert.AreEqual(true, inst0.PropagateParameterChanges);

            var inst1 = child2.Component.Instances[0];
            Assert.AreEqual(false, inst1.PropagateParameterChanges);
            Assert.AreEqual(1, inst1.Placements.Count);
            Assert.AreEqual(2, inst1.InstanceParameterValuesPersistent.Count);
            Assert.IsTrue(inst1.Placements[0] is SimInstancePlacementNetwork);
            Assert.AreEqual(node, ((SimInstancePlacementNetwork)inst1.Placements[0]).NetworkElement);

            var inst2 = child2.Component.Instances[1];
            Assert.AreEqual(false, inst2.PropagateParameterChanges);
            Assert.AreEqual(1, inst2.Placements.Count);
            Assert.AreEqual(2, inst2.InstanceParameterValuesPersistent.Count);
            Assert.IsTrue(inst2.Placements[0] is SimInstancePlacementGeometry);

            //Mappings
            Assert.AreEqual(1, child1.Component.CalculatorMappings.Count);
            var mapping = child1.Component.CalculatorMappings_Internal[0];
            Assert.AreEqual(child2.Component, mapping.Calculator);
            Assert.AreEqual(1, mapping.InputMapping.Count);
            Assert.AreEqual(child1.Component.Parameters[0], mapping.InputMapping[0].DataParameter);
            Assert.AreEqual(child2.Component.Parameters[0], mapping.InputMapping[0].CalculatorParameter);

            Assert.AreEqual(1, mapping.OutputMapping.Count);
            Assert.AreEqual(child1.Component.Parameters[1], mapping.OutputMapping[0].DataParameter);
            Assert.AreEqual(child2.Component.Parameters[1], mapping.OutputMapping[0].CalculatorParameter);

            //Access Profile
            Assert.AreEqual(SimComponentValidity.Valid, root.AccessLocal.ProfileState);
            Assert.AreEqual(SimComponentValidity.WriteAfterSupervize, child1.Component.AccessLocal.ProfileState);
            Assert.AreEqual(SimComponentValidity.WriteAfterRelease, child2.Component.AccessLocal.ProfileState);

            Assert.AreEqual(SimComponentAccessPrivilege.All, root.AccessLocal[SimUserRole.ARCHITECTURE].Access);
            Assert.AreEqual(SimComponentAccessPrivilege.All, child1.Component.AccessLocal[SimUserRole.ARCHITECTURE].Access);
            Assert.AreEqual(SimComponentAccessPrivilege.All, child2.Component.AccessLocal[SimUserRole.ARCHITECTURE].Access);

            Assert.AreEqual(new DateTime(2022, 05, 07, 0, 0, 0, DateTimeKind.Utc),
                child2.Component.AccessLocal[SimUserRole.ARCHITECTURE].LastAccessWrite);

            //Chat
            Assert.AreEqual(1, root.Conversation.TopItems.Count);
            Assert.AreEqual(2, root.Conversation.TopItems.First().Value.Children.Count);

            //Visibility
            Assert.AreEqual(SimComponentVisibility.AlwaysVisible, root.Visibility);
            Assert.AreEqual(SimComponentVisibility.VisibleInProject, child1.Component.Visibility);
            Assert.AreEqual(SimComponentVisibility.VisibleInProject, child2.Component.Visibility);

            //Sorting
            Assert.AreEqual(SimComponentContentSorting.BySlot, root.SortingType);
            Assert.AreEqual(SimComponentContentSorting.ByName, child1.Component.SortingType);
            Assert.AreEqual(SimComponentContentSorting.ByName, child2.Component.SortingType);
        }

        [TestMethod]
        public void ParseMultipleV6()
        {
            Guid guid = new Guid("98478ed1-d3f4-4873-95b6-412e5e23aac4");
            Guid otherguid = new Guid("98478ed1-d3f4-4873-95b6-412e5e23aac5");

            ExtendedProjectData projectData = new ExtendedProjectData();
            projectData.SetCallingLocation(new DummyReferenceLocation(guid));

            SimFlowNetworkNode node = new SimFlowNetworkNode(guid, 123, "", "", true, new SimPoint(3.5, 3.6), null);

            using (DXFStreamReader reader = new DXFStreamReader(StringStream.Create(Resources.DXFSerializer_ReadCODXF_MultipleV6)))
            {
                var info = new DXFParserInfo(guid, projectData);
                info.FileVersion = 6;
                ComponentDxfIOComponents.ReadComponentSection(reader, info);
            }

            projectData.Components.RestoreReferences(new Dictionary<SimObjectId, SimFlowNetworkElement>
            {
                { node.ID, node }
            });
            TaxonomyUtils.LoadDefaultTaxonomies(projectData);
            var undefinedTax = projectData.Taxonomies.GetDefaultSlot(SimDefaultSlotKeys.Undefined);
            var costTax = projectData.Taxonomies.GetDefaultSlot(SimDefaultSlotKeys.Cost);
            var jointTax = projectData.Taxonomies.GetDefaultSlot(SimDefaultSlotKeys.Joint);
            projectData.Components.RestoreDefaultTaxonomyReferences();

            Assert.AreEqual(1, projectData.Components.Count);
            var root = projectData.Components.First();
            CheckComponent(root, new SimTaxonomyEntryReference(jointTax), "Root Component", "Some" + Environment.NewLine + "descriptive" + Environment.NewLine + "text",
                4, true, SimColor.FromArgb(230, 240, 10, 20));
            Assert.AreEqual(0, root.Parameters.Count);

            Assert.AreEqual(3, root.Components.Count);
            //Child components
            var child1 = root.Components[0];
            var child2 = root.Components[1];
            CheckComponent(child1, new SimSlot(new SimTaxonomyEntryReference(costTax), "0"), "Child Component 1",
                "Some" + Environment.NewLine + "descriptive" + Environment.NewLine + "text2", 3, false, SimColor.FromArgb(230, 100, 10, 20));
            Assert.AreEqual(2, child1.Component.Parameters.Count);
            CheckComponent(child2, new SimSlot(new SimTaxonomyEntryReference(undefinedTax), "1"), "Child Component 2",
                "Some" + Environment.NewLine + "descriptive" + Environment.NewLine + "text3", 1, true, SimColor.FromArgb(230, 240, 10, 32));
            Assert.AreEqual(2, child2.Component.Parameters.Count);


            //Placeholder
            Assert.AreEqual(null, root.Components[2].Component);
            Assert.AreEqual(new SimSlot(new SimTaxonomyEntryReference(costTax), "1"), root.Components[2].Slot);

            //References
            Assert.AreEqual(3, child1.Component.ReferencedComponents.Count);
            var refs = root.Components[0].Component.ReferencedComponents;
            Assert.AreEqual(new SimSlot(jointTax, "0"), refs[0].Slot);
            Assert.AreEqual(SimId.Empty, refs[0].TargetId);

            Assert.AreEqual(new SimSlot(jointTax, "1"), refs[1].Slot);
            Assert.AreEqual(new SimId(guid, 1), refs[1].TargetId);
            Assert.AreEqual(child2.Component, refs[1].Target);

            Assert.AreEqual(new SimSlot(jointTax, "3"), refs[2].Slot);
            Assert.AreEqual(new SimId(guid, 2), refs[2].TargetId);
            Assert.AreEqual(null, refs[2].Target);

            //Parameter
            Assert.AreEqual(20011, child1.Component.Parameters.First(x => x.NameTaxonomyEntry.Text == "A1").Id.LocalId);

            //Calculations
            Assert.AreEqual(0, root.Calculations.Count);
            Assert.AreEqual(0, child1.Component.Calculations.Count);
            Assert.AreEqual(1, child2.Component.Calculations.Count);

            var calc = child2.Component.Calculations[0];
            Assert.AreEqual(30001, calc.Id.LocalId);
            Assert.AreEqual("x*x", calc.Expression);
            Assert.AreEqual(1, calc.InputParams.Count);
            Assert.AreEqual(child2.Component.Parameters.First(x => x.NameTaxonomyEntry.Text == "A"), calc.InputParams["x"]);
            Assert.AreEqual(1, calc.ReturnParams.Count);
            Assert.AreEqual(child2.Component.Parameters.First(x => x.NameTaxonomyEntry.Text == "B"), calc.ReturnParams["ret"]);

            //Instances
            Assert.AreEqual(SimInstanceType.NetworkEdge, root.InstanceType);
            Assert.AreEqual(SimInstanceType.AttributesFace, child1.Component.InstanceType);
            Assert.AreEqual(SimInstanceType.NetworkNode, child2.Component.InstanceType);

            Assert.AreEqual(0, root.Instances.Count);
            Assert.AreEqual(1, child1.Component.Instances.Count);
            Assert.AreEqual(2, child2.Component.Instances.Count);

            var inst0 = child1.Component.Instances[0];
            Assert.AreEqual(true, inst0.PropagateParameterChanges);

            var inst1 = child2.Component.Instances[0];
            Assert.AreEqual(false, inst1.PropagateParameterChanges);
            Assert.AreEqual(1, inst1.Placements.Count);
            Assert.AreEqual(2, inst1.InstanceParameterValuesPersistent.Count);
            Assert.IsTrue(inst1.Placements[0] is SimInstancePlacementNetwork);
            Assert.AreEqual(node, ((SimInstancePlacementNetwork)inst1.Placements[0]).NetworkElement);

            var inst2 = child2.Component.Instances[1];
            Assert.AreEqual(false, inst2.PropagateParameterChanges);
            Assert.AreEqual(1, inst2.Placements.Count);
            Assert.AreEqual(2, inst2.InstanceParameterValuesPersistent.Count);
            Assert.IsTrue(inst2.Placements[0] is SimInstancePlacementGeometry);

            //Mappings
            Assert.AreEqual(1, child1.Component.CalculatorMappings.Count);
            var mapping = child1.Component.CalculatorMappings_Internal[0];
            Assert.AreEqual(child2.Component, mapping.Calculator);
            Assert.AreEqual(1, mapping.InputMapping.Count);
            Assert.AreEqual(child1.Component.Parameters[0], mapping.InputMapping[0].DataParameter);
            Assert.AreEqual(child2.Component.Parameters[0], mapping.InputMapping[0].CalculatorParameter);

            Assert.AreEqual(1, mapping.OutputMapping.Count);
            Assert.AreEqual(child1.Component.Parameters[1], mapping.OutputMapping[0].DataParameter);
            Assert.AreEqual(child2.Component.Parameters[1], mapping.OutputMapping[0].CalculatorParameter);

            //Access Profile
            Assert.AreEqual(SimComponentValidity.Valid, root.AccessLocal.ProfileState);
            Assert.AreEqual(SimComponentValidity.WriteAfterSupervize, child1.Component.AccessLocal.ProfileState);
            Assert.AreEqual(SimComponentValidity.WriteAfterRelease, child2.Component.AccessLocal.ProfileState);

            Assert.AreEqual(SimComponentAccessPrivilege.All, root.AccessLocal[SimUserRole.ARCHITECTURE].Access);
            Assert.AreEqual(SimComponentAccessPrivilege.All, child1.Component.AccessLocal[SimUserRole.ARCHITECTURE].Access);
            Assert.AreEqual(SimComponentAccessPrivilege.All, child2.Component.AccessLocal[SimUserRole.ARCHITECTURE].Access);

            Assert.AreEqual(new DateTime(2022, 05, 07, 0, 0, 0, DateTimeKind.Utc),
                child2.Component.AccessLocal[SimUserRole.ARCHITECTURE].LastAccessWrite);

            //Chat
            Assert.AreEqual(1, root.Conversation.TopItems.Count);
            Assert.AreEqual(2, root.Conversation.TopItems.First().Value.Children.Count);

            //Visibility
            Assert.AreEqual(SimComponentVisibility.AlwaysVisible, root.Visibility);
            Assert.AreEqual(SimComponentVisibility.VisibleInProject, child1.Component.Visibility);
            Assert.AreEqual(SimComponentVisibility.VisibleInProject, child2.Component.Visibility);

            //Sorting
            Assert.AreEqual(SimComponentContentSorting.BySlot, root.SortingType);
            Assert.AreEqual(SimComponentContentSorting.ByName, child1.Component.SortingType);
            Assert.AreEqual(SimComponentContentSorting.ByName, child2.Component.SortingType);
        }

        [TestMethod]
        public void ParseMultipleV4()
        {
            Guid guid = new Guid("98478ed1-d3f4-4873-95b6-412e5e23aac4");
            Guid otherguid = new Guid("98478ed1-d3f4-4873-95b6-412e5e23aac5");

            ExtendedProjectData projectData = new ExtendedProjectData();
            projectData.SetCallingLocation(new DummyReferenceLocation(guid));

            SimFlowNetworkNode node = new SimFlowNetworkNode(guid, 123, "", "", true, new SimPoint(3.5, 3.6), null);

            using (DXFStreamReader reader = new DXFStreamReader(StringStream.Create(Resources.DXFSerializer_ReadCODXF_MultipleV4)))
            {
                var info = new DXFParserInfo(guid, projectData);
                info.FileVersion = 4;
                ComponentDxfIOComponents.ReadComponentSection(reader, info);
            }

            projectData.Components.RestoreReferences(new Dictionary<SimObjectId, SimFlowNetworkElement>
            {
                { node.ID, node }
            });
            TaxonomyUtils.LoadDefaultTaxonomies(projectData);
            var undefinedTax = projectData.Taxonomies.GetDefaultSlot(SimDefaultSlotKeys.Undefined);
            var costTax = projectData.Taxonomies.GetDefaultSlot(SimDefaultSlotKeys.Cost);
            var jointTax = projectData.Taxonomies.GetDefaultSlot(SimDefaultSlotKeys.Joint);
            projectData.Components.RestoreDefaultTaxonomyReferences();

            Assert.AreEqual(1, projectData.Components.Count);
            var root = projectData.Components.First();
            CheckComponent(root, new SimTaxonomyEntryReference(jointTax), "Root Component", "Some" + Environment.NewLine + "descriptive" + Environment.NewLine + "text",
                4, true, SimColor.FromArgb(230, 240, 10, 20));
            Assert.AreEqual(0, root.Parameters.Count);

            Assert.AreEqual(3, root.Components.Count);
            //Child components
            var child1 = root.Components[0];
            var child2 = root.Components[1];
            CheckComponent(child1, new SimSlot(new SimTaxonomyEntryReference(costTax), "0"), "Child Component 1",
                "Some" + Environment.NewLine + "descriptive" + Environment.NewLine + "text2", 3, false, SimColor.FromArgb(230, 100, 10, 20));
            Assert.AreEqual(2, child1.Component.Parameters.Count);
            CheckComponent(child2, new SimSlot(new SimTaxonomyEntryReference(undefinedTax), "1"), "Child Component 2",
                "Some" + Environment.NewLine + "descriptive" + Environment.NewLine + "text3", 1, true, SimColor.FromArgb(230, 240, 10, 32));
            Assert.AreEqual(2, child2.Component.Parameters.Count);

            //Placeholder
            Assert.AreEqual(null, root.Components[2].Component);
            Assert.AreEqual(new SimSlot(new SimTaxonomyEntryReference(costTax), "1"), root.Components[2].Slot);

            //References
            Assert.AreEqual(3, child1.Component.ReferencedComponents.Count);
            var refs = root.Components[0].Component.ReferencedComponents;
            Assert.AreEqual(new SimSlot(jointTax, "0"), refs[0].Slot);
            Assert.AreEqual(SimId.Empty, refs[0].TargetId);

            Assert.AreEqual(new SimSlot(jointTax, "1"), refs[1].Slot);
            Assert.AreEqual(new SimId(guid, 1), refs[1].TargetId);
            Assert.AreEqual(child2.Component, refs[1].Target);

            Assert.AreEqual(new SimSlot(jointTax, "3"), refs[2].Slot);
            Assert.AreEqual(new SimId(guid, 2), refs[2].TargetId);
            Assert.AreEqual(null, refs[2].Target);

            //Parameter
            Assert.AreEqual(1076741825, child1.Component.Parameters.First(x => x.NameTaxonomyEntry.Text == "A1").Id.LocalId);

            //Calculations
            Assert.AreEqual(0, root.Calculations.Count);
            Assert.AreEqual(0, child1.Component.Calculations.Count);
            Assert.AreEqual(1, child2.Component.Calculations.Count);

            var calc = child2.Component.Calculations[0];
            Assert.AreEqual(1075741824, calc.Id.LocalId);
            Assert.AreEqual("x*x", calc.Expression);
            Assert.AreEqual(1, calc.InputParams.Count);
            Assert.AreEqual(child2.Component.Parameters.First(x => x.NameTaxonomyEntry.Text == "A"), calc.InputParams["x"]);
            Assert.AreEqual(1, calc.ReturnParams.Count);
            Assert.AreEqual(child2.Component.Parameters.First(x => x.NameTaxonomyEntry.Text == "B"), calc.ReturnParams["ret"]);

            //Instances
            Assert.AreEqual(SimInstanceType.NetworkEdge, root.InstanceType);
            Assert.AreEqual(SimInstanceType.AttributesFace, child1.Component.InstanceType);
            Assert.AreEqual(SimInstanceType.NetworkNode, child2.Component.InstanceType);

            Assert.AreEqual(0, root.Instances.Count);
            Assert.AreEqual(1, child1.Component.Instances.Count);
            Assert.AreEqual(2, child2.Component.Instances.Count);

            var inst0 = child1.Component.Instances[0];
            Assert.AreEqual(true, inst0.PropagateParameterChanges);

            var inst1 = child2.Component.Instances[0];
            Assert.AreEqual(false, inst1.PropagateParameterChanges);
            Assert.AreEqual(1, inst1.Placements.Count);
            Assert.AreEqual(2, inst1.InstanceParameterValuesPersistent.Count);
            Assert.IsTrue(inst1.Placements[0] is SimInstancePlacementNetwork);
            Assert.AreEqual(node, ((SimInstancePlacementNetwork)inst1.Placements[0]).NetworkElement);

            var inst2 = child2.Component.Instances[1];
            Assert.AreEqual(false, inst2.PropagateParameterChanges);
            Assert.AreEqual(1, inst2.Placements.Count);
            Assert.AreEqual(2, inst2.InstanceParameterValuesPersistent.Count);
            Assert.IsTrue(inst2.Placements[0] is SimInstancePlacementGeometry);

            //Mappings
            Assert.AreEqual(1, child1.Component.CalculatorMappings.Count);
            var mapping = child1.Component.CalculatorMappings_Internal[0];
            Assert.AreEqual(child2.Component, mapping.Calculator);
            Assert.AreEqual(1, mapping.InputMapping.Count);
            Assert.AreEqual(child1.Component.Parameters[0], mapping.InputMapping[0].DataParameter);
            Assert.AreEqual(child2.Component.Parameters[0], mapping.InputMapping[0].CalculatorParameter);

            Assert.AreEqual(1, mapping.OutputMapping.Count);
            Assert.AreEqual(child1.Component.Parameters[1], mapping.OutputMapping[0].DataParameter);
            Assert.AreEqual(child2.Component.Parameters[1], mapping.OutputMapping[0].CalculatorParameter);

            //Access Profile
            Assert.AreEqual(SimComponentValidity.Valid, root.AccessLocal.ProfileState);
            Assert.AreEqual(SimComponentValidity.WriteAfterSupervize, child1.Component.AccessLocal.ProfileState);
            Assert.AreEqual(SimComponentValidity.WriteAfterRelease, child2.Component.AccessLocal.ProfileState);

            Assert.AreEqual(SimComponentAccessPrivilege.All, root.AccessLocal[SimUserRole.ARCHITECTURE].Access);
            Assert.AreEqual(SimComponentAccessPrivilege.All, child1.Component.AccessLocal[SimUserRole.ARCHITECTURE].Access);
            Assert.AreEqual(SimComponentAccessPrivilege.All, child2.Component.AccessLocal[SimUserRole.ARCHITECTURE].Access);

            Assert.AreEqual(new DateTime(2022, 05, 07, 0, 0, 0, DateTimeKind.Utc),
                child2.Component.AccessLocal[SimUserRole.ARCHITECTURE].LastAccessWrite);

            //Chat
            Assert.AreEqual(1, root.Conversation.TopItems.Count);
            Assert.AreEqual(2, root.Conversation.TopItems.First().Value.Children.Count);

            //Visibility
            Assert.AreEqual(SimComponentVisibility.AlwaysVisible, root.Visibility);
            Assert.AreEqual(SimComponentVisibility.VisibleInProject, child1.Component.Visibility);
            Assert.AreEqual(SimComponentVisibility.VisibleInProject, child2.Component.Visibility);

            //Sorting
            Assert.AreEqual(SimComponentContentSorting.BySlot, root.SortingType);
            Assert.AreEqual(SimComponentContentSorting.ByName, child1.Component.SortingType);
            Assert.AreEqual(SimComponentContentSorting.ByName, child2.Component.SortingType);
        }

        [TestMethod]
        public void ParseMultipleV1()
        {
            Guid guid = new Guid("98478ed1-d3f4-4873-95b6-412e5e23aac4");
            Guid otherguid = new Guid("98478ed1-d3f4-4873-95b6-412e5e23aac5");

            ExtendedProjectData projectData = new ExtendedProjectData();
            projectData.SetCallingLocation(new DummyReferenceLocation(guid));

            SimFlowNetworkNode node = new SimFlowNetworkNode(guid, 123, "", "", true, new SimPoint(3.5, 3.6), null);

            using (DXFStreamReader reader = new DXFStreamReader(StringStream.Create(Resources.DXFSerializer_ReadCODXF_MultipleV1)))
            {
                var info = new DXFParserInfo(guid, projectData);
                info.FileVersion = 1;
                ComponentDxfIOComponents.ReadComponentSection(reader, info);
            }


            projectData.Components.RestoreReferences(new Dictionary<SimObjectId, SimFlowNetworkElement>
            {
                { node.ID, node }
            });
            TaxonomyUtils.LoadDefaultTaxonomies(projectData);
            var undefinedTax = projectData.Taxonomies.GetDefaultSlot(SimDefaultSlotKeys.Undefined);
            var costTax = projectData.Taxonomies.GetDefaultSlot(SimDefaultSlotKeys.Cost);
            var jointTax = projectData.Taxonomies.GetDefaultSlot(SimDefaultSlotKeys.Joint);
            projectData.Components.RestoreDefaultTaxonomyReferences();

            Assert.AreEqual(1, projectData.Components.Count);
            var root = projectData.Components.First();
            CheckComponent(root, new SimTaxonomyEntryReference(jointTax), "Root Component", "Some" + Environment.NewLine + "descriptive" + Environment.NewLine + "text",
                4, true, SimColor.FromArgb(230, 240, 10, 20));
            Assert.AreEqual(0, root.Parameters.Count);

            Assert.AreEqual(3, root.Components.Count);
            //Child components
            var child1 = root.Components[0];
            var child2 = root.Components[1];
            CheckComponent(child1, new SimSlot(new SimTaxonomyEntryReference(costTax), "0"), "Child Component 1",
                "Some" + Environment.NewLine + "descriptive" + Environment.NewLine + "text2", 3, false, SimColor.FromArgb(230, 100, 10, 20));
            Assert.AreEqual(2, child1.Component.Parameters.Count);
            CheckComponent(child2, new SimSlot(new SimTaxonomyEntryReference(undefinedTax), "1"), "Child Component 2",
                "Some" + Environment.NewLine + "descriptive" + Environment.NewLine + "text3", 1, true, SimColor.FromArgb(230, 240, 10, 32));
            Assert.AreEqual(2, child2.Component.Parameters.Count);

            //Placeholder
            Assert.AreEqual(null, root.Components[2].Component);
            Assert.AreEqual(new SimSlot(new SimTaxonomyEntryReference(costTax), "1"), root.Components[2].Slot);

            //References
            Assert.AreEqual(3, child1.Component.ReferencedComponents.Count);
            var refs = root.Components[0].Component.ReferencedComponents;
            Assert.AreEqual(new SimSlot(jointTax, "0"), refs[0].Slot);
            Assert.AreEqual(SimId.Empty, refs[0].TargetId);

            Assert.AreEqual(new SimSlot(jointTax, "1"), refs[1].Slot);
            Assert.AreEqual(new SimId(guid, 1), refs[1].TargetId);
            Assert.AreEqual(child2.Component, refs[1].Target);

            Assert.AreEqual(new SimSlot(jointTax, "3"), refs[2].Slot);
            Assert.AreEqual(new SimId(guid, 2), refs[2].TargetId);
            Assert.AreEqual(null, refs[2].Target);

            //Parameter
            Assert.AreEqual(1076741825, child1.Component.Parameters.First(x => x.NameTaxonomyEntry.Text == "A1").Id.LocalId);

            //Calculations
            Assert.AreEqual(0, root.Calculations.Count);
            Assert.AreEqual(0, child1.Component.Calculations.Count);
            Assert.AreEqual(1, child2.Component.Calculations.Count);

            var calc = child2.Component.Calculations[0];
            Assert.AreEqual(1075741824, calc.Id.LocalId);
            Assert.AreEqual("x*x", calc.Expression);
            Assert.AreEqual(1, calc.InputParams.Count);
            Assert.AreEqual(child2.Component.Parameters.First(x => x.NameTaxonomyEntry.Text == "A"), calc.InputParams["x"]);
            Assert.AreEqual(1, calc.ReturnParams.Count);
            Assert.AreEqual(child2.Component.Parameters.First(x => x.NameTaxonomyEntry.Text == "B"), calc.ReturnParams["ret"]);

            //Instances
            Assert.AreEqual(SimInstanceType.NetworkEdge, root.InstanceType);
            Assert.AreEqual(SimInstanceType.AttributesFace, child1.Component.InstanceType);
            Assert.AreEqual(SimInstanceType.NetworkNode, child2.Component.InstanceType);

            Assert.AreEqual(0, root.Instances.Count);
            Assert.AreEqual(1, child1.Component.Instances.Count);
            Assert.AreEqual(2, child2.Component.Instances.Count);

            var inst0 = child1.Component.Instances[0];
            Assert.AreEqual(true, inst0.PropagateParameterChanges);

            var inst1 = child2.Component.Instances[0];
            Assert.AreEqual(false, inst1.PropagateParameterChanges);
            Assert.AreEqual(1, inst1.Placements.Count);
            Assert.AreEqual(2, inst1.InstanceParameterValuesPersistent.Count);
            Assert.IsTrue(inst1.Placements[0] is SimInstancePlacementNetwork);
            Assert.AreEqual(node, ((SimInstancePlacementNetwork)inst1.Placements[0]).NetworkElement);

            var inst2 = child2.Component.Instances[1];
            Assert.AreEqual(false, inst2.PropagateParameterChanges);
            Assert.AreEqual(1, inst2.Placements.Count);
            Assert.AreEqual(2, inst2.InstanceParameterValuesPersistent.Count);
            Assert.IsTrue(inst2.Placements[0] is SimInstancePlacementGeometry);

            //Mappings
            Assert.AreEqual(1, child1.Component.CalculatorMappings.Count);
            var mapping = child1.Component.CalculatorMappings_Internal[0];
            Assert.AreEqual(child2.Component, mapping.Calculator);
            Assert.AreEqual(1, mapping.InputMapping.Count);
            Assert.AreEqual(child1.Component.Parameters[0], mapping.InputMapping[0].DataParameter);
            Assert.AreEqual(child2.Component.Parameters[0], mapping.InputMapping[0].CalculatorParameter);

            Assert.AreEqual(1, mapping.OutputMapping.Count);
            Assert.AreEqual(child1.Component.Parameters[1], mapping.OutputMapping[0].DataParameter);
            Assert.AreEqual(child2.Component.Parameters[1], mapping.OutputMapping[0].CalculatorParameter);

            //Access Profile
            Assert.AreEqual(SimComponentValidity.Valid, root.AccessLocal.ProfileState);
            Assert.AreEqual(SimComponentValidity.WriteAfterSupervize, child1.Component.AccessLocal.ProfileState);
            Assert.AreEqual(SimComponentValidity.WriteAfterRelease, child2.Component.AccessLocal.ProfileState);

            Assert.AreEqual(SimComponentAccessPrivilege.All, root.AccessLocal[SimUserRole.ARCHITECTURE].Access);
            Assert.AreEqual(SimComponentAccessPrivilege.All, child1.Component.AccessLocal[SimUserRole.ARCHITECTURE].Access);
            Assert.AreEqual(SimComponentAccessPrivilege.All, child2.Component.AccessLocal[SimUserRole.ARCHITECTURE].Access);

            Assert.AreEqual(new DateTime(2022, 05, 07, 0, 0, 0, DateTimeKind.Utc),
                child2.Component.AccessLocal[SimUserRole.ARCHITECTURE].LastAccessWrite);

            //Chat
            Assert.AreEqual(1, root.Conversation.TopItems.Count);
            Assert.AreEqual(2, root.Conversation.TopItems.First().Value.Children.Count);

            //Visibility
            Assert.AreEqual(SimComponentVisibility.AlwaysVisible, root.Visibility);
            Assert.AreEqual(SimComponentVisibility.VisibleInProject, child1.Component.Visibility);
            Assert.AreEqual(SimComponentVisibility.VisibleInProject, child2.Component.Visibility);

            //Sorting
            Assert.AreEqual(SimComponentContentSorting.BySlot, root.SortingType);
            Assert.AreEqual(SimComponentContentSorting.ByName, child1.Component.SortingType);
            Assert.AreEqual(SimComponentContentSorting.ByName, child2.Component.SortingType);
        }

        [TestMethod]
        public void ParseMultipleV0()
        {
            Guid guid = new Guid("98478ed1-d3f4-4873-95b6-412e5e23aac4");
            Guid otherguid = new Guid("98478ed1-d3f4-4873-95b6-412e5e23aac5");

            ExtendedProjectData projectData = new ExtendedProjectData();
            projectData.SetCallingLocation(new DummyReferenceLocation(guid));

            SimFlowNetworkNode node = new SimFlowNetworkNode(guid, 123, "", "", true, new SimPoint(3.5, 3.6), null);

            using (DXFStreamReader reader = new DXFStreamReader(StringStream.Create(Resources.DXFSerializer_ReadCODXF_MultipleV0)))
            {
                ComponentDxfIOComponents.ReadComponentSection(reader, new DXFParserInfo(guid, projectData));
            }


            projectData.Components.RestoreReferences(new Dictionary<SimObjectId, SimFlowNetworkElement>
            {
                { node.ID, node }
            });
            TaxonomyUtils.LoadDefaultTaxonomies(projectData);
            var undefinedTax = projectData.Taxonomies.GetDefaultSlot(SimDefaultSlotKeys.Undefined);
            var costTax = projectData.Taxonomies.GetDefaultSlot(SimDefaultSlotKeys.Cost);
            var jointTax = projectData.Taxonomies.GetDefaultSlot(SimDefaultSlotKeys.Joint);
            projectData.Components.RestoreDefaultTaxonomyReferences();

            Assert.AreEqual(1, projectData.Components.Count);
            var root = projectData.Components.First();
            CheckComponent(root, new SimTaxonomyEntryReference(jointTax), "Root Component", "Some" + Environment.NewLine + "descriptive" + Environment.NewLine + "text",
                4, true, SimColor.FromArgb(230, 240, 10, 20));
            Assert.AreEqual(0, root.Parameters.Count);

            Assert.AreEqual(3, root.Components.Count);
            //Child components
            var child1 = root.Components[0];
            var child2 = root.Components[1];
            CheckComponent(child1, new SimSlot(new SimTaxonomyEntryReference(costTax), "0"), "Child Component 1",
                "Some" + Environment.NewLine + "descriptive" + Environment.NewLine + "text2", 3, false, SimColor.FromArgb(230, 100, 10, 20));
            Assert.AreEqual(2, child1.Component.Parameters.Count);
            CheckComponent(child2, new SimSlot(new SimTaxonomyEntryReference(undefinedTax), "1"), "Child Component 2",
                "Some" + Environment.NewLine + "descriptive" + Environment.NewLine + "text3", 1, true, SimColor.FromArgb(230, 240, 10, 32));
            Assert.AreEqual(2, child2.Component.Parameters.Count);

            //Placeholder
            Assert.AreEqual(null, root.Components[2].Component);
            Assert.AreEqual(new SimSlot(new SimTaxonomyEntryReference(costTax), "1"), root.Components[2].Slot);

            //References
            Assert.AreEqual(3, child1.Component.ReferencedComponents.Count);
            var refs = root.Components[0].Component.ReferencedComponents;
            Assert.AreEqual(new SimSlot(jointTax, "0"), refs[0].Slot);
            Assert.AreEqual(SimId.Empty, refs[0].TargetId);

            Assert.AreEqual(new SimSlot(jointTax, "1"), refs[1].Slot);
            Assert.AreEqual(new SimId(guid, 1), refs[1].TargetId);
            Assert.AreEqual(child2.Component, refs[1].Target);

            Assert.AreEqual(new SimSlot(jointTax, "3"), refs[2].Slot);
            Assert.AreEqual(new SimId(guid, 2), refs[2].TargetId);
            Assert.AreEqual(null, refs[2].Target);

            //Parameter
            Assert.AreEqual(1076741825, child1.Component.Parameters.First(x => x.NameTaxonomyEntry.Text == "A1").Id.LocalId);

            //Calculations
            Assert.AreEqual(0, root.Calculations.Count);
            Assert.AreEqual(0, child1.Component.Calculations.Count);
            Assert.AreEqual(1, child2.Component.Calculations.Count);

            var calc = child2.Component.Calculations[0];
            Assert.AreEqual(1075741824, calc.Id.LocalId);
            Assert.AreEqual("x*x", calc.Expression);
            Assert.AreEqual(1, calc.InputParams.Count);
            Assert.AreEqual(child2.Component.Parameters.First(x => x.NameTaxonomyEntry.Text == "A"), calc.InputParams["x"]);
            Assert.AreEqual(1, calc.ReturnParams.Count);
            Assert.AreEqual(child2.Component.Parameters.First(x => x.NameTaxonomyEntry.Text == "B"), calc.ReturnParams["ret"]);

            //Instances
            Assert.AreEqual(SimInstanceType.NetworkEdge, root.InstanceType);
            Assert.AreEqual(SimInstanceType.AttributesFace, child1.Component.InstanceType);
            Assert.AreEqual(SimInstanceType.NetworkNode, child2.Component.InstanceType);

            Assert.AreEqual(0, root.Instances.Count);
            Assert.AreEqual(1, child1.Component.Instances.Count);
            Assert.AreEqual(2, child2.Component.Instances.Count);

            var inst0 = child1.Component.Instances[0];
            Assert.AreEqual(true, inst0.PropagateParameterChanges);

            var inst1 = child2.Component.Instances[0];
            Assert.AreEqual(false, inst1.PropagateParameterChanges);
            Assert.AreEqual(1, inst1.Placements.Count);
            Assert.AreEqual(2, inst1.InstanceParameterValuesPersistent.Count);
            Assert.IsTrue(inst1.Placements[0] is SimInstancePlacementNetwork);
            Assert.AreEqual(node, ((SimInstancePlacementNetwork)inst1.Placements[0]).NetworkElement);

            var inst2 = child2.Component.Instances[1];
            Assert.AreEqual(false, inst2.PropagateParameterChanges);
            Assert.AreEqual(1, inst2.Placements.Count);
            Assert.AreEqual(2, inst2.InstanceParameterValuesPersistent.Count);
            Assert.IsTrue(inst2.Placements[0] is SimInstancePlacementGeometry);

            //Mappings
            Assert.AreEqual(1, child1.Component.CalculatorMappings.Count);
            var mapping = child1.Component.CalculatorMappings_Internal[0];
            Assert.AreEqual(child2.Component, mapping.Calculator);
            Assert.AreEqual(1, mapping.InputMapping.Count);
            Assert.AreEqual(child1.Component.Parameters[0], mapping.InputMapping[0].DataParameter);
            Assert.AreEqual(child2.Component.Parameters[0], mapping.InputMapping[0].CalculatorParameter);

            Assert.AreEqual(1, mapping.OutputMapping.Count);
            Assert.AreEqual(child1.Component.Parameters[1], mapping.OutputMapping[0].DataParameter);
            Assert.AreEqual(child2.Component.Parameters[1], mapping.OutputMapping[0].CalculatorParameter);

            //Access Profile
            Assert.AreEqual(SimComponentValidity.Valid, root.AccessLocal.ProfileState);
            Assert.AreEqual(SimComponentValidity.WriteAfterSupervize, child1.Component.AccessLocal.ProfileState);
            Assert.AreEqual(SimComponentValidity.WriteAfterRelease, child2.Component.AccessLocal.ProfileState);

            Assert.AreEqual(SimComponentAccessPrivilege.All, root.AccessLocal[SimUserRole.ARCHITECTURE].Access);
            Assert.AreEqual(SimComponentAccessPrivilege.All, child1.Component.AccessLocal[SimUserRole.ARCHITECTURE].Access);
            Assert.AreEqual(SimComponentAccessPrivilege.All, child2.Component.AccessLocal[SimUserRole.ARCHITECTURE].Access);

            Assert.AreEqual(new DateTime(2022, 05, 07, 0, 0, 0, DateTimeKind.Utc),
                child2.Component.AccessLocal[SimUserRole.ARCHITECTURE].LastAccessWrite);

            //Chat
            Assert.AreEqual(1, root.Conversation.TopItems.Count);
            Assert.AreEqual(2, root.Conversation.TopItems.First().Value.Children.Count);

            //Visibility
            Assert.AreEqual(SimComponentVisibility.AlwaysVisible, root.Visibility);
            Assert.AreEqual(SimComponentVisibility.VisibleInProject, child1.Component.Visibility);
            Assert.AreEqual(SimComponentVisibility.VisibleInProject, child2.Component.Visibility);

            //Sorting is not present in V0 -> all by name
            Assert.AreEqual(SimComponentContentSorting.ByName, root.SortingType);
            Assert.AreEqual(SimComponentContentSorting.ByName, child1.Component.SortingType);
            Assert.AreEqual(SimComponentContentSorting.ByName, child2.Component.SortingType);
        }
    }
}
